adventures:
    story:
        name: Hist√≥rias
        default_save_name: Hist√≥ria
        description: Hist√≥ria
        levels:
            1:
                story_text: |
                    No n√≠vel 1 voc√™ pode fazer uma hist√≥ria com um personagem principal diferente que voc√™ mesmo(a) insere.

                    Na primeira linha, use `{ask}` e pergunte quem ser√° o personagem principal da hist√≥ria.

                    Ap√≥s essa primeira linha, comece com `{print}` se a frase precisar ser impressa.
                    Voc√™ usa `{echo}` se quiser que seu personagem principal esteja no final da frase.
                example_code: |
                    ```
                    {ask} O personagem principal desta hist√≥ria √©
                    {print} O personagem principal agora vai andar pela floresta
                    {echo} Ele est√° um pouco assustado,
                    {print} Ele ouve barulhos estranhos em todos os lugares
                    {print} Ele tem medo que esta seja uma floresta assombrada
                    ```
                story_text_2: "### Exerc√≠cio \nAgora crie sua pr√≥pria hist√≥ria com pelo menos 6 linhas de c√≥digo.\nEssa hist√≥ria n√£o pode ser a mesma do c√≥digo de exemplo.\nUse pelo menos um comando `{ask}` e um comando `{echo}`.\nVoc√™ pode escolher qualquer t√≥pico para a hist√≥ria.\nSe n√£o conseguir pensar\
                    \ em um t√≥pico, pode usar uma das nossas sugest√µes: ir ao cinema, uma partida esportiva ou um dia no zool√≥gico.\n"
            2:
                story_text: |
                    No n√≠vel 2 voc√™ pode tornar sua hist√≥ria mais divertida. O nome do seu personagem principal agora pode estar em qualquer lugar dentro da frase.

                    Voc√™ tem que programar um pouco mais para isso. Agora voc√™ deve nomear seu personagem principal primeiro.

                    Voc√™ pode ent√£o colocar esse nome em qualquer lugar em uma frase.
                example_code: |-
                    ```
                    nome {is} {ask} Qual √© o nome do(a) personagem principal?
                    {print} nome agora vai correr na floresta
                    {print} nome est√° um pouco(a) assustado(a)
                    {print} De repente ele(a) ouve um barulho estranho...
                    {sleep}
                    {print} nome est√° com medo de que esta seja uma floresta assombrada
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Agora √© hora de adicionar vari√°veis √† sua pr√≥pria hist√≥ria que voc√™ criou no n√≠vel anterior.
                    V√° em ‚ÄòMeus programas‚Äô, procure sua aventura de hist√≥ria de n√≠vel 1 e copie o c√≥digo. Cole o c√≥digo na tela de entrada neste n√≠vel.
                    Este c√≥digo n√£o funcionar√° neste n√≠vel, porque voc√™ ainda n√£o utilizou vari√°veis.
                    Altere os comandos `{ask}` e `{echo}` em seu c√≥digo para a forma correta que voc√™ aprendeu neste n√≠vel.
                    **Extra** Adicione um comando `{sleep}` ao seu c√≥digo para aumentar a tens√£o na sua hist√≥ria.
            3:
                story_text: |
                    No n√≠vel 3 voc√™ pode tornar sua hist√≥ria mais divertida. Voc√™ pode usar aleatoriedade para qualquer monstro, animal ou outro obst√°culo, assim:
                example_code: |
                    ```
                    animais {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} Ouve agora o som de animais {at} {random}
                    ```
                story_text_2: |
                    O comando `{add}` tamb√©m pode ser √∫til em sua hist√≥ria.
                example_code_2: |
                    ```
                    {print} Ele ouve um som
                    animais {is} üêø, ü¶î, ü¶á, ü¶â
                    animal {is} {ask} O que voc√™ acha que √©?
                    {add} animal {to_list} animais
                    {print} era um animais {at} {random}
                    ```
                story_text_3: |
                    Este √© um exemplo do comando `{remove}` em sua hist√≥ria

                    ### Exercise
                    Copie a sua hist√≥ria dos n√≠veis anteriores para esse n√≠vel.
                    Nesse n√≠vel, voc√™ aprendeu 3 novos comandos: `{at} {random}` , `{add} {to_list}` e `{remove} {from}`.
                    Adicione novas linhas de c√≥digo √† sua hist√≥ria, usando cada um desses comandos novos pelo menos uma vez.
                example_code_3: |
                    ```
                    {print} A sua ficou muito pesada.
                    {print} Dentro havia uma garrafa de √°gua, uma lanterna e um tijolo.
                    mochila {is} √°gua, lanterna, tijolo
                    lixo {is} {ask} Qual item deve ser descartado?
                    {remove} lixo {from} mochila
                    ```
            4:
                story_text: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo e o complete adicionando aspas nas lacunas das linhas 1 e 2.
                    As lacunas das linhas 3 e 4 n√£o devem ser preenchidas com aspas, mas sim com os comandos `{sleep}` e `{clear}`. Voc√™ consegue fazer ele funcionar?

                    ### Exerc√≠cio 2
                    Volte ao n√≠vel anterior e copie o c√≥digo da sua hist√≥ria. Fa√ßa o c√≥digo funcionar nesse n√≠vel adicionando aspas nos lugares certos.
                    Aten√ß√£o: As vari√°veis da sua hist√≥ria devem ficar do lado de fora das aspas. Assim como na segunda linha do c√≥digo exemplo: naquela linha, o nome da vari√°vel se encontra por fora das aspas.
                example_code: |
                    ```
                    nome {is} {ask} _ Qual √© o seu nome? _
                    {print}  _ O(a) personagem principal se chama _ nome
                    _
                    _
                    {print} nome  _ agora est√° indo andar na floresta _
                    {print} nome _ est√° um pouco assustado(a) _
                    animais {is} ü¶î, üêø, ü¶â, ü¶á
                    {print} _ Ele(a) ouve um som de _ animais {at} {random}
                    {print} nome _ tem medo que esta seja uma floresta mal-assombrada _
                    ```
            5:
                story_text: |
                    Neste n√≠vel voc√™ pode programar finais diferentes, o que tornar√° sua hist√≥ria ainda mais divertida.

                    Pense em dois finais para sua hist√≥ria, por exemplo:

                    - A princesa est√° andando pela floresta
                    - Ela se depara com um monstro

                    - Final feliz: ela pega sua espada e o monstro foge rapidamente
                    - Final triste: O monstro devora a princesa

                    Voc√™ tamb√©m pode garantir que um nome possa ser inserido novamente. Isso funciona exatamente como nos n√≠veis anteriores. Voc√™ pode combinar isso com um `{if}`, e ent√£o voc√™ j√° fez um programa inteiro!
                example_code: |
                    ```
                    nome {is} {ask} 'Quem est√° andando na floresta?'
                    {print} nome ' caminha pela floresta'
                    {print} nome ' encontra um monstro'
                    final {is} {ask} 'Voc√™ gostaria de um final feliz ou triste?'
                    {if} final {is} feliz {print} nome ' pega a espada e o monstro foge rapidamente'
                    {else} {print} 'O monstro devora ' nome
                    ```
            7:
                story_text: |
                    Em uma hist√≥ria, algu√©m diz a mesma palavra v√°rias vezes. Por exemplo, quando algu√©m pede ajuda ou canta uma m√∫sica.
                    Voc√™ pode colocar tais repeti√ß√µes em sua hist√≥ria neste n√≠vel, com `{repeat}`.

                    ### Exerc√≠cio
                    Adicione uma repeti√ß√£o √† sua pr√≥pria hist√≥ria. Volte aos seus programas salvos, escolha a sua hist√≥ria de um dos n√≠veis anteriores,
                    encontre uma linha contendo `{print}` e a repita!
                example_code: |
                    ```
                    {print} 'O pr√≠ncipe n√£o parava de pedir ajuda'
                    {repeat} 5 {times} {print} 'Socorro!'
                    {print} 'Por que ningu√©m est√° me ajudando?'
                    ```
            8:
                story_text: |
                    Neste n√≠vel voc√™ pode usar v√°rias linhas em seus comandos `{if}`, desta forma voc√™ pode atualizar seu final feliz ou triste!

                    ### Exerc√≠cio 1
                    O c√≥digo exemplo mostra dois finais diferentes: um em que as personagens saltam em uma m√°quina do tempo e outro em que elas n√£o saltam.
                    Complete as lacunas com pelo menos uma senten√ßa para cada final.
                    **Extra** Deixe a hist√≥ria mais longa. O que acontece depois? Voc√™ tamb√©m pode adicionar um segundo `{ask}` com op√ß√µes diferentes.

                    ### Exerc√≠cio 2
                    Volte aos seus programas salvos e escolha a sua hist√≥ria do n√≠vel 5. Ent√£o, escreva um final feliz e um triste, com pelo menos 3 linhas cada!
                example_code: |
                    ```
                    {print} 'OH N√ÉO! O T-rex est√° se aproximando!'
                    final = {ask} 'Voc√™ quer um final feliz ou triste?'
                    {if} final {is} feliz
                        {print} 'Bem a tempo Ricardo volta para a m√°quina do tempo!'
                        {print} _
                    {else}
                        {print} 'Oh n√£o! Ricardo foi lento demais...'
                        {print} _
                    ```
            9:
                story_text: |
                    Neste n√≠vel voc√™ pode usar o encaixamento para colocar comandos {if}, {repeat} ou {for} dentro de outros comandos {if}, {repeat} ou {for}. Isso oferece muitas op√ß√µes e realmente ajuda voc√™ a tornar sua hist√≥ria interativa.
                example_code: |
                    ```
                    {print} 'Roberta est√° andando no centro'
                    local = {ask} 'Roberta vai entrar numa loja, ou ela vai para casa?'
                    {if} local {is} loja
                        {print} 'Ela entra na loja.'
                        {print} 'Roberta v√™ um livro interessante'
                        compra = {ask} 'A Roberta vai comprar o livro?'
                        {if} compra {is} sim
                        _ {print} 'Roberta compra o livro e vai para casa'
                        _ {else}
                        _ {print} 'Roberta sai da loja e vai para casa'
                    {else}
                        {print} 'Roberta vai para casa'
                    ```
            10:
                story_text: |
                    Neste n√≠vel voc√™ pode usar o comando {for} em sua hist√≥ria. Desta forma, voc√™ poderia facilmente programar o livro infantil 'urso pardo, urso pardo, o que voc√™ v√™'.
                example_code: "```\nanimais = _ , _ , _ \n{print} 'Urso marrom, Urso marrom'\n{print} 'O que voc√™ v√™?'\n```\n"
            12:
                story_text: Neste n√≠vel, voc√™ pode usar as aspas simples para salvar v√°rias palavras em uma vari√°vel.
                example_code: |
                    ```
                    nome = 'A Rainha da Inglaterra'
                    {print} nome 'estava comendo um peda√ßo de bolo, quando de repente...'
                    ```
            13:
                story_text: |
                    Usando os comandos `{and}` e `{or}`, voc√™ pode encurtar suas hist√≥rias. Por exemplo, confira a hist√≥ria do drag√£o.
                example_code: |
                    ```
                    {print} 'Nossa hero√≠na est√° andando pela floresta'
                    {print} 'O caminho se divide em dois'
                    caminho = {ask} 'Para qual lado ela deve seguir?'
                    arma = {ask} 'Que arma ela deve sacar?'
                    {if} caminho {is} 'esquerda' {and} arma {is} 'espada'
                        _
                    ```
            15:
                story_text: |
                    Usar o la√ßo `{while}` pode tornar suas hist√≥rias mais interessantes. Por exemplo, voc√™ pode usar `{while} jogo == 'ligado'` para poder jogar at√© que o jogo termine.
                    Ou voc√™ pode usar `{while} espada == 'perdida'` para que o(a) jogador(a) n√£o possa continuar o jogo at√© encontrar algo.

                    ### Exerc√≠cio
                    O c√≥digo exemplo mostra como usar o la√ßo `{while}` em uma hist√≥ria. Agora **invente o seu pr√≥prio cen√°rio** em que o(a) jogador(a) precisa encontrar algo antes de continuar.
                example_code: |
                    ```
                    chaves = 'perdidas'
                    {print} 'Voc√™ est√° no seu jardim e perdeu suas chaves.'
                    {print} 'Onde voc√™ quer procur√°-las?'
                    {print} 'Voc√™ pode escolher: √°rvore, canteiro de flores, pedra, caixa postal'
                    {while} chaves == 'perdidas'
                        local = {ask} 'Onde voc√™ quer procurar?'
                        {if} local == 'canteiro de flores'
                            {print} 'Aqui est√£o elas!'
                            chaves = 'encontradas'
                        {else}
                            {print} 'N√£o, elas n√£o est√£o no ' local
                    {print} 'Agora voc√™ pode entrar na casa!'
                    ```
            18:
                story_text: |
                    Vamos agora imprimir outra hist√≥ria, mas desta vez usando par√™nteses com o `{print}`.

                    ### Exerc√≠cio 1
                    Crie uma hist√≥ria de pelo menos 5 frases. Voc√™ n√£o precisa usar 'nome' ainda.
                example_code: |
                    ```
                    {print}('Bem-vindo(a) a esta hist√≥ria!')
                    ```
                story_text_2: |
                    ### Exerc√≠cio 2
                    N√≥s j√° preparamos uma `{input}` para voc√™. Primeiro, use a vari√°vel `name` na sua hist√≥ria.
                    Ent√£o, adicione um segundo `{ask}` e use a vari√°vel dele tamb√©m.
                    Dica: Lembre-se de usar v√≠rgulas em um `{print}` entre os textos e as vari√°veis!
                example_code_2: |
                    ```
                    nome = {input}("Qual √© o seu nome?")
                    {print}('Bem-vindo(a) a esta hist√≥ria!')
                    ```
    add_remove_command:
        name: '{add} {to_list} & {remove} {from}'
        default_save_name: comando_some_remova
        description: introduzindo {add} {to_list} e {remove} {from}
        levels:
            3:
                story_text: |
                    ## Some a
                    Voc√™ pode adicionar itens a uma lista usando o comando `{add} {to_list}`. Basta digitar: `{add} pinguim {to_list} animais`, ou voc√™ pode usar o comando `{ask}` assim como no c√≥digo exemplo.
                example_code: |
                    ```
                    animais {is} cachorro, gato, canguru
                    preferido {is} {ask} Qual √© o seu animal favorito?
                    {add} preferido {to_list} animais
                    {print} Eu escolho animais {at} {random}
                    ```
                story_text_2: |
                    ## Remova de
                    Se voc√™ pode adicionar itens a uma lista, √© claro que voc√™ tamb√©m pode tirar. Isso √© feito usando o comando `{remove} {from}`.
                example_code_2: |
                    ```
                    animais {is} cachorro, gato, canguru
                    n√£o_gosta {is} {ask} De que animal voc√™ n√£o gosta?
                    {remove} n√£o_gosta {from} animais
                    {print} Eu escolho animais {at} {random}
                    ```
                story_text_3: |
                    ### Exerc√≠cio
                    Experimente seus novos comandos nesse restaurante virtual. Adicione o sabor que o(a) jogador(a) espera conseguir √† lista e remova os sabores aos quais ele(a) √© al√©rgico(a).
                example_code_3: |
                    ```
                    {print} Milkshake misterioso
                    sabores {is} morango, chocolate, baunilha
                    esperado {is} {ask} Que sabor voc√™ espera conseguir?
                    _
                    alergias {is} {ask} Voc√™ tem alergia a algum sabor?
                    _
                    {print} Voc√™ conseguiu um milkshake de sabores {at} {random}
                    ```
    and_or_command:
        name: '{and} & {or}'
        default_save_name: e ou
        description: introduzindo {and} & {or}
        levels:
            13:
                story_text: |-
                    Vamos agora aprender a usar `{and}` e `{or}`! Se voc√™ quer checar duas condi√ß√µes, voc√™ n√£o precisa usar dois `{if}`s, voc√™ pode usar `{and}` e `{or}`.

                    Se voc√™ usar `{and}`, ambas as condi√ß√µes, √† esquerda e √† direita do `{and}`, precisam ser verdadeiras. Podemos tamb√©m usar `{or}`, quando apenas uma das condi√ß√µes precisa ser verdadeira.
                example_code: |
                    ```
                    nome = {ask} 'qual √© o seu nome?'
                    idade = {ask} 'qual √© a sua idade?'
                    {if} nome {is} 'Hedy' {and} idade {is} 2
                        {print} 'Voc√™ √© a verdadeira Hedy!'
                    ```
    ask_command:
        name: '{ask}'
        default_save_name: comando_pergunte
        description: Introdu√ß√£o ao comando {ask}
        levels:
            1:
                story_text: |
                    ## O comando pergunte
                    Agora que voc√™ sabe usar o comando `{print}`, voc√™ est√° pronto(a) para aprender o pr√≥ximo comando: `{ask}`. Com o comando `{ask}`, voc√™ pode fazer uma pergunta. Veja:
                example_code: |
                    ```
                    {print} Ol√°!
                    {ask} Qual √© o seu nome?
                    ```
                story_text_2: |
                    ## O comando `{echo}`
                    Se voc√™ quer que o computador repita a resposta dada, voc√™ pode usar o comando `{echo}`. A resposta vai ser "ecoada" de volta a voc√™ no fim da frase, nesse caso depois do ol√°.
                example_code_2: |
                    ```
                    {print} Ol√°!
                    {ask} Qual √© o seu nome?
                    {echo} ol√°
                    ```
                story_text_3: |
                    ### Exerc√≠cio
                    Experimente os comandos `{ask}` e `{echo}`. Primeiro, preencha as lacunas para fazer esse programa funcionar.
                    Ent√£o fa√ßa mais 2 perguntas usando o comando `{ask}`, e depois de cada `{ask}` use um `{echo}` para imprimir a resposta na tela.
                example_code_3: |
                    ```
                    _ Como voc√™ est√°?
                    _
                    ```
            2:
                story_text: |
                    ## O comando pergunte
                    Agora que podemos usar **vari√°veis** em nossos c√≥digos, n√£o precisamos mais do comando `{echo}`.
                    Podemos usar vari√°veis para guardar as respostas √†s nossas perguntas e, assim, us√°-las em diversas outras partes de nossos c√≥digos.
                    Veja:

                    Assim o seu c√≥digo est√° ficando interativo!
                example_code: |
                    ```
                    nome {is} {ask} Qual √© o seu nome?
                    {print} Ol√° nome
                    idade {is} {ask} Quantos anos voc√™ tem?
                    {print} nome tem idade anos.
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Na aba anterior, voc√™ praticou a defini√ß√£o de vari√°veis com o comando `{is}`.
                    Voc√™ criou pelo menos 3 vari√°veis e usou elas com um comando de imprimir.
                    Agora, ao inv√©s de definir as vari√°veis, queremos que voc√™ as torne interativas, assim como fizemos em nosso exemplo.

                    Copie o seu c√≥digo da aba anterior e torne as vari√°veis interativas usando comandos `{ask}`.
                example_code_2: |
                    ```
                    animais_favoritos {is} {ask} Qual √© o seu animal favorito?
                    {print} Eu gosto de animais_favoritos
                    ```
            18:
                story_text: The final change we will need to make to get Python code is changing `{ask}` into `{input}`.
                example_code: |
                    ```
                    {print}('Meu nome √© Hedy!')
                    nome = {input}('Qual √© o seu nome?')
                    {print}('Ent√£o o seu nome √© ', nome)
                    ```
    blackjack:
        name: Vinte-e-um
        default_save_name: Vinte-e-um
        description: Tente chegar o mais perto de 21 que conseguir
        levels:
            17:
                story_text: |
                    Blackjack is a simple game of cards in which you have to get as close to 21 points as possible. You get two cards. Each card is worth their numeral value, and the face cards (Jack, Queen and King) are worth 10 points.
                    The Ace is worth either 1 or 11 points (you can choose). The dealer, your opponent, also gets two cards.
                    If you want, you can get another card, and its points will be added to your total. The dealer can also choose to take another card.
                    But be careful not to get more than 21 points, because if you do, you lose!
                    The player who gets closest to 21, without going over it, wins!

                    Have fun!
                example_code: |
                    ```
                    {print} 'VINTE-E-UM'
                    cartas = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Valete', 'Dama','Rei', '√Ås']
                    pontos = 0
                    dealer_pontos = 0
                    carta_1 = cartas[{random}]
                    carta_2 = cartas[{random}]
                    carta_3 = cartas [{random}]
                    dealer_carta_1 = cartas[{random}]
                    dealer_carta_2 = cartas[{random}]
                    dealer_carta_3 = cartas[{random}]
                    # Pontos para a carta 1
                    {if} carta_1 == 'Valete' {or} carta_1 == 'Dama' {or} carta_1 == 'Rei':
                        pontos = pontos + 10
                    {elif} carta_1 == '√Ås':
                        pontos = pontos + 11
                    {else}:
                        pontos = pontos + carta_1
                    # Pontos para a carta 2
                    {if} carta_2 == 'Valete' {or} carta_2 == 'Dama' {or} carta_2 == 'Rei':
                        pontos = pontos + 10
                    {elif} carta_2 == '√Ås':
                        pontos = pontos + 11
                    {else}:
                        pontos = pontos + carta_2
                    # Pontos para a carta 1 do dealer
                    {if} dealer_carta_1 == 'Valete' {or} dealer_carta_1 == 'Dama' {or} dealer_carta_1 == 'Rei':
                        dealer_pontos = dealer_pontos + 10
                    {elif} dealer_carta_1 == '√Ås':
                        dealer_pontos = dealer_pontos + 11
                    {else}:
                        dealer_pontos = dealer_pontos + dealer_carta_1
                    # Pontos para a carta 2 do dealer
                    {if} dealer_carta_2 == 'Valete' {or} dealer_carta_2 == 'Dama' {or} dealer_carta_2 == 'Rei':
                        dealer_pontos = dealer_pontos + 10
                    {elif} dealer_carta_2 == '√Ås':
                        dealer_pontos = dealer_pontos + 11
                    {else}:
                        dealer_pontos = dealer_pontos + dealer_carta_2
                    # Dois Ases
                    {if} carta_1 == '√Ås' {and} carta_2 == '√Ås':
                        pontos = 12
                    {if} dealer_carta_1 == '√Ås' {and} dealer_carta_2 == '√Ås':
                        dealer_pontos = 12
                    # Placar
                    {print} 'Voc√™ tem um(a) ' carta_1 ' e um(a) ' carta_2 ' (' pontos ' pontos)'
                    {print} 'O dealer tem um(a) ' dealer_carta_1 ' e um(a) ' dealer_carta_2 ' (' dealer_pontos ' pontos)'
                    # Carta extra para o jogador
                    hit = {ask} 'Voc√™ quer uma carta extra?'
                    {if} hit == 'sim':
                        {if} carta_3 == 'Valete' {or} carta_3 == 'Dama' {or} carta_3 == 'Rei':
                            pontos = pontos + 10
                        {elif} carta_3 == '√Ås':
                            {if} pontos > 11:
                                pontos = pontos + 11
                            {else}:
                                pontos = pontos + 1
                        {else}:
                            pontos = pontos + carta_3
                        {print} 'Voc√™ pegou uma carta extra: ' carta_3 ' (' pontos ' pontos)'
                    {else}:
                        {print} 'Sem cartas extra'
                    # Vencedor
                    {if} pontos > 21 {or} dealer_pontos > pontos {or} dealer_pontos == 21:
                        {print} 'Voc√™ perdeu'
                    {elif} dealer_pontos < 17:
                        {print} 'O dealer compra uma carta extra. E ela √©... ' dealer_carta_3
                        {if} dealer_carta_3 == 'Valete' {or} dealer_carta_3 == 'Dama' {or} dealer_carta_3 == 'Rei':
                            dealer_pontos = dealer_pontos + 10
                        {elif} dealer_carta_3 == '√Ås':
                            {if} dealer_pontos < 11:
                                dealer_pontos = dealer_pontos + 11
                            {else}:
                                dealer_pontos = dealer_pontos + 1
                        {else}:
                            dealer_pontos = dealer_pontos + dealer_carta_3
                        {print} 'O dealer tem ' dealer_pontos ' pontos agora'
                        {if} dealer_pontos < 21 {and} dealer_pontos > pontos:
                            {print} 'Voc√™ perdeu'
                        {else}:
                            {print} 'Voc√™ ganhou'
                    {elif} pontos > dealer_pontos {and} pontos < 21:
                        {print} 'Voc√™ ganhou!'
                    ```
    calculator:
        name: Calculadora
        default_save_name: Calculadora
        description: Crie uma calculadora
        levels:
            6:
                story_text: |
                    Now that you can calculate, you can also create a program to practice maths calculations. You can make up the calculations yourself, for example:
                example_code: |
                    ```
                    n√∫mero_1 = {ask} 'Digite o primeiro n√∫mero:'
                    n√∫mero_2 = {ask} 'Digite o segundo n√∫mero:'
                    resposta_correta = n√∫mero_1 * n√∫mero_2
                    {print} n√∫mero_1 ' vezes ' n√∫mero_2 ' √© ' resposta_correta
                    ```
                story_text_2: |
                    You can also let the computer do random calculations on its own using {random}.
                example_code_2: |
                    ```
                    resposta_correta = 11 * 27
                    resposta = {ask} 'Quanto √© 11 vezes 27?'
                    {if} resposta {is} _ {print} 'bom trabalho!'
                    {else} {print} 'Errado! A resposta era ' _
                    ```
                story_text_3: |
                    **Extra** Voc√™ tamb√©m pode deixar o computador calcular produtos aleat√≥rios sozinho usando `{random}`.
                example_code_3: |-
                    ```
                    n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    n√∫mero_1 = _
                    n√∫mero_2 = _
                    resposta_correta = n√∫mero_1 * n√∫mero_2
                    resposta_dada = {ask} 'Quanto √© ' n√∫mero_1 ' vezes ' n√∫mero_2 '?'
                    {if} _
                    {else} _
                    ```
            9:
                story_text: |
                    No n√≠vel 6, voc√™ criou uma calculadora. Neste n√≠vel, voc√™ pode expandir aquele c√≥digo para que ele fa√ßa mais perguntas.

                    ### Exerc√≠cio 1
                    Voc√™ consegue completar a linha 10 para fazer o programa funcionar?

                    ### Exerc√≠cio 2
                    Deixe o(a) jogador(a) saber quando tiver acertado ou errado uma resposta. Para fazer isso, extenda seu programa com um `{else}`.
                example_code: |
                    ```
                    pontua√ß√£o = 0
                    {repeat} 10 {times}
                        n√∫meros = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        n√∫mero1 = n√∫meros {at} {random}
                        n√∫mero2 = n√∫meros {at} {random}
                        resposta_correta = n√∫mero1 * n√∫mero2
                        {print} 'Quanto √© ' n√∫mero1 ' vezes ' n√∫mero2 '?'
                        resposta = {ask} 'Digite aqui a sua resposta...'
                        {print} 'Voc√™ respondeu ' resposta
                        {if} _ {is} _
                            pontua√ß√£o = pontua√ß√£o + 1
                    {print} '√ìtimo trabalho! Sua pontua√ß√£o foi... ' pontua√ß√£o ' de 10!'
                    ```
            10:
                story_text: |
                    This calculator game helps you practise your tables of multiplication!
                    If you add more numbers to the list, you can practise all the multiplications.
                example_code: |
                    ```
                    n√∫meros = 1, 2, 3
                    {for} n√∫mero1 {in} n√∫meros
                        {for} n√∫mero2 {in} n√∫meros
                            resposta = {ask} 'Quanto √© ' n√∫mero2 ' vezes ' n√∫mero1 '?'
                            correta = n√∫mero1 * n√∫mero2
                            {if} resposta {is} correta
                                {print} '√ìtimo trabalho!'
                            {else}
                                {print} 'Errado. A resposta correta √© ' correta
                    ```
            11:
                story_text: |
                    With a `{for}` you can simplify tables of multiplication practise program.

                    ### Exercise 1
                    Improve the example code such that it prints a nice multiplication table: <br> "1 times 10 is 10", "2 times 10 is 20", etc.

                    ### Exercise 2
                    Go back to your level 10 multiplication code, and modify it so that it uses a `{for}` and `{range}`.
                example_code: |
                    ```
                    n√∫mero = 10
                    {for} i {in} {range} 1 {to} 10
                        {print} i * n√∫mero
                    ```
            12:
                story_text: |
                    Neste n√≠vel, voc√™ pode fazer uma calculadora que funciona com n√∫meros decimais.

                    ### Exerc√≠cio 1
                    Preencha as lacunas para completar a calculadora. Lembre-se de usar pontos para n√∫meros decimais, n√£o v√≠rgulas.

                    ### Exerc√≠cio 2
                    Crie um novo programa para praticar matem√°tica, desta vez usando n√∫meros decimais.
                    Crie uma lista de n√∫meros, escolha dois para multiplicar e deixe o(a) jogador(a) responder.
                    E claro, voc√™ precisa validar a resposta! **Extra** Eleve a dificuldade com um sistema de vidas: O(a) jogador(a) perde uma vida toda vez que errar uma pergunta, e depois de tr√™s erros o jogo acaba.
                example_code: |
                    ```
                    n√∫mero1 = {ask} 'Qual √© o primeiro n√∫mero?'
                    n√∫mero2 = {ask} 'Qual √© o segundo n√∫mero?'
                    resposta = _
                    {print} n√∫mero1 ' mais ' n√∫mero2 ' √© ' _
                    ```
            13:
                story_text: |
                    ### Exerc√≠cio 1
                    Vamos deixar o programa de pr√°tica um pouco mais dif√≠cil. O(a) jogador(a) agora ter√° de responder duas respostas corretamente. Preencha as lacunas para completar o programa.

                    ### Exerc√≠cio 2 Extra
                    √Äs vezes, c√°lculos podem ter mais de uma resposta correta. Por exemplo, 10 pode ser dividido tanto por 5 quanto por 2. Ent√£o a pergunta 'Que n√∫mero divide o 10?' pode ser respondida por 2 ou por 5.
                    Fa√ßa uma pergunta de um c√°lculo que aceite mais de uma resposta correta, pe√ßa ao(√†) jogador(a) para dar uma resposta e determine se ela est√° correta usando `{or}`.
                    Esvazie o campo de programa√ß√£o e crie a sua pr√≥pria solu√ß√£o.
                example_code: |
                    ```
                    resposta1 = {ask} 'Quanto √© 10 vezes 7?'
                    resposta2 = {ask} 'Quanto √© 6 vezes 7?'
                    {if} _ _ _ _ _ _ _
                        {print} _
                    ```
            14:
                story_text: |
                    In this adventure you will build a calculator that calculates your mean grade for you. If you get your calculator to work, you can move on to the next adventure, which allows you to add two extra features.

                    ### Exercise 1
                    Fill in the blanks to get the calculator to work.
                    * Start with the fourth line, add a question to figure out what grade the student got.
                    * In the fifth line you'll want to calculate the total of all grades, so the total = total + grade.
                    * Then we get to set the return value. We want to return the mean, so the total devided by the amount of tests (4).
                    * Lastly we finish the code by calling the function in line 8.

                    Did you get it? Awesome! Would you like to add even more to your calculator? **This adventure continues in the next tab!**
                example_code: |
                    ```
                    {define} calculate_mean_grade
                        total = 0
                        {for} i {in} {range} 1 {to} 4
                            grade = {ask} _
                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
                    ```

                            total = total + _
                            return _ / 4

                    mean_grade = {call} _
                    {print} 'Your mean grade is ' mean_grade
            15:
                story_text: |
                    You can add the `{while}` loop to the calculator game you've learned to make in a previous level.
                    This makes sure the player can't continue to the next question if they answer incorrectly.

                    ### Exercise
                    Add the `{while}` loop in the function, ask the player what number_1 times number_2 is and print their answer.
                    Then `{call}` the function.
                example_code: |
                    ```
                    {define} new_question
                        numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                        number_1 = numbers {at} {random}
                        number_2 = numbers {at} {random}
                        correct = number_1 * number_2
                        answer = 0
                        _
                        _
                        _
                        {print} 'Well done!'

                    {print} 'Give 10 correct answers to win!'
                    {for} i {in} {range} 1 {to} 10
                        _
                    {print} 'You win!'
                    ```
    calculator_2:
        name: Calculator 2
        default_save_name: Calculadora 2
        description: Calculadora 2
        levels:
            14:
                story_text: |
                    ### Exercise 2
                    **This is the second part of this adventure.** The adventure starts in the previous tab.
                    Of course, you don't always want to calculate the mean of 4 tests. You might want to calculate the mean of 10 tests or only 2...
                    We can fix this problem by adding the argument and variable 'amount_of_tests'.
                    * Start a new line on line 3. Set the amount_of_tests argument by asking the student how many tests they have made.
                    * Change the 4 in line 4 to the new argument amount_of_tests.
                    * Lastly, change the 4 in line 6 to amount_of_tests

                    Try out your new program. Does it work?

                    ### Exercise 3
                    Did you want to make your program even better? Great! In the previous program you could only calculate the mean grade of 1 subject, but it would be better if you could calculate the mean grade for all subjects you want!
                    We won't tell you how to do it, but we will give you one tip: Start your code in line 1 with: define calculate_mean_grade with subject.
                example_code: |
                    ```
                    # Use your own code from the previous adventure.
                    ```
    clear_command:
        name: '{clear}'
        default_save_name: comando_limpe
        description: comando {clear}
        levels:
            4:
                story_text: |
                    Time for a new command! With `{clear}` you can clear all the text form your output screen. This way you can prevent your screen getting too full of text.
                    Beware! If you are using a `{clear}` command, you might need to use a `{sleep}` above it. Otherwise Hedy will clear your screen without giving you the time to read as you can see in the example!
                example_code: |
                    ```
                    {print} '3'
                    {clear}
                    {print} '2'
                    {clear}
                    {print} '1'
                    {clear}
                    {print} 'wait for it...'
                    {sleep} 3
                    {clear}
                    {print} 'SURPRISE!'
                    ```
    debugging:
        name: depura√ß√£o
        default_save_name: depura√ß√£o
        description: aventura de depura√ß√£o
        levels:
            1:
                story_text: |-
                    Bem-vindo(a) a uma aventura de depura√ß√£o (debug, em ingl√™s). Depurar c√≥digo significa se livrar de erros e problemas no programa.
                    Isso significa que, nestas aventuras, vamos te mostrar c√≥digos que n√£o funcionam ainda.
                    Voc√™ ter√° de descobrir o que h√° de errado e corrigir os problemas que encontrar.

                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {print} Eu amo programar
                    Voc√™ tamb√©m ama programar?
                    {echo}
                    {print} Quais s√£o os seus hobbies?
                    {echo} Seus hobbies s√£o
                    ```
            2:
                story_text: |-
                    Bem-vindo(a) a uma aventura de depura√ß√£o (debug, em ingl√™s). Depurar c√≥digo significa se livrar de erros e problemas no programa.
                    Isso significa que, nestas aventuras, vamos te mostrar c√≥digos que n√£o funcionam ainda.
                    Voc√™ ter√° de descobrir o que h√° de errado e corrigir os problemas que encontrar.

                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    destino {ask} Aonde voc√™ vai nessas f√©rias?
                    {print} O voo ao dstino sai √†s 15h.
                    {ask} Voc√™ j√° despachou sua bagagem?
                    {echo}
                    {print} Deixe-me imprimir o seu cart√£o de embarque.
                    {sleep}
                    Aqui est√°! Tenha uma boa viagem!
                    ```
            3:
                story_text: |-
                    Bem-vindo(a) a uma aventura de depura√ß√£o (debug, em ingl√™s). Depurar c√≥digo significa se livrar de erros e problemas no programa.
                    Isso significa que, nestas aventuras, vamos te mostrar c√≥digos que n√£o funcionam ainda.
                    Voc√™ ter√° de descobrir o que h√° de errado e corrigir os problemas que encontrar.

                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    lista_de_filmes {is} dr√°cula, velozes e furiosos, esqueceram de mim, barbie
                    filme_escolhido {is} filmes {at} {random}
                    {print} Hoje vamos assistir filme _escolhido
                    gosto {ask} Voc√™ gosta desse filme?
                    {print} Amanh√£ vamos assistir outra coisa.
                    {add} filme_escolhido {to_list} lista_de_filmes
                    {print} Amanh√£ vamos assistir filme_de_amanh√£
                    filme_de_amanh√£ {is} lista_de_filmes {at} {random}
                    Vou pegar a pipoca! {print}
                    ```
            4:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {print} 'Bem-vindo(a) √† biblioteca online!
                    {ask} De que g√™nero de livros voc√™ gosta?
                    {print} Voc√™ gosta de g√™nero
                    autor {is} {ask} 'Quem √© o seu autor favorito?'
                    {print} 'autor √© o seu autor favorito'
                    {print} Hmmm... acho que voc√™ devia experimentar ler... livros {at} {random}
                    ```
            5:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} Welcome to Swimming Pool Hedy!
                    class {is} {ask} 'Are you here to join a class today?'
                    {if} class yes
                    {print} 'Great! You're joining a class!
                    {print} {else} 'You will not be joining a class'
                    discount {is} 'Do you have a discount code?'
                    {if} discount {is} yes
                    discount_answer {is} {ask} 'What's your discount code?'
                    discount_codes = Senior4231, Student8786, NewMember6709
                    {if} discount_answer {is} {in} discount_cods
                    {print} 'That will be $3,50'
                    'That will be $5,50'
                    {print} 'Have a nice swim!'
                    ```
            6:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Vending machine'
                    chosen_product = {ask} 'Please select a product'
                    1_dollar_products = coke orange juice water
                    2_dollar_products = chocolate, cookie, museli bar
                    3dollar_prodcuts = potato chips, beef jerky, banana bread
                    {if} chosen {is} {in} 1_dollar_products
                    price = 1
                    {if} chosen_product {is} 2_dollar_products
                    price = 2
                    {else} chosen_product {in} 3_dollar_products
                    price = 3
                    amount_of_products = '{ask} How many of ' chosen_product would you like to have?'
                    total = price + amount_of_product
                    {print} 'That will be $' price 'please'
                    ```
            7:
                story_text: |-
                    ### Exerc√≠cio
                    Surpresa! Este programa parece mais um texto de sa√≠da do que um c√≥digo. Ainda assim, n√£o queremos que voc√™ apenas adicione comandos `{print}` no come√ßo de cada linha.
                    Conserte esse programa e o transforme na can√ß√£o infantil 'Meus Dedinhos (Fr√®re Jaques)' usando, √© claro, o comando {repeat}!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    Meus dedinhos!
                    Onde est√£o?
                    Eles se saudam!
                    E se v√£o!
                    ```
            8:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Warning! This code needs to be debugged!**
                    ```
                    {print} 'Welcome to Manicures and Pedicures by Hedy'
                    bodypart = {ask} 'Are you getting your fingernails or toenails done today? Or both?'
                    {if} bodyparts {is} both
                            {print} That will be $25'
                            price = 25
                        {else}
                            {print} That will be $18'
                            price = 18
                    color = {ask} What color would you like?
                    sparkles = {ask} 'Would you like some sparkles with that?'
                    {if} sparkles {is} yes
                        {print} 'We charge $3 extra for that'
                    price = price + 3
                    {else} {print} 'No sparkles' {print} 'So no extra charge'
                    {sleep} 5
                    {print} 'All done! That will be $' price ' please!'
                    {print} 'Thank you! Byebye!'
                    ```
            9:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {print} 'Bem-vindo(a) √† nossa sanduicheria'
                    quantidade 'Quantos sandu√≠ches voc√™ gostaria de comprar?'
                    {repeat} quantidade {times}
                    {ask} {is} {ask} 'Que tipo de p√£o voc√™ gostaria no seu sandu√≠che?'
                    tipos_de_p√£o {is} branco, integral, franc√™s, alho, sem gl√∫ten
                    {if} p√£o_escolhido em tipos_de_p√£o
                    {print} '√ìtima escolha!'
                    {else}
                    'Desculpe, n√£o temos esse'
                    cobertura {is} {ask} 'De que cobertura voc√™ gostaria?'
                    molho {is} {ask} 'De que molho voc√™ gostaria?'
                    {print} Um p√£o_escolhido com cobertura e molho.
                    pre√ßo = quantidade * 6
                    {print} 'Vai custar 'pre√ßo reais', por gentileza'
                    ```
            10:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    nomes = Marcos Helena Samuel Nat√°lia
                    atividades = soltar pipa, nadar, fazer caminhadas, se bronzear
                    {for} nome {is} nomes
                    {print} nome adora atividade {at} {random} na praia
                    ```
            11:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este programa de calend√°rio. A sa√≠da deste programa precisa se parecer com uma lista de datas.
                    Por exemplo:

                    ```
                    Calend√°rio Hedy
                    Aqui est√£o todos os dias de Novembro
                    1 de Novembro
                    2 de Novembro
                    3 de Novembro
                    ```
                    E assim por diante.

                    Note que voc√™ deve testar o seu c√≥digo com aten√ß√£o extra para o m√™s de Fevereiro, visto que a quantidade de dias deste m√™s muda em anos bissextos.
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {print} 'Calend√°rio Hedy'
                    meses_com_31 dias = Janeiro, Mar√ßo, Maio, Julho, Setembro, Outubro, Dezembro
                    meses_com_30_dias = Abril, Junho, Agosto, Novembro
                    m√™s = {ask} 'Qual m√™s voc√™ gostaria de ver?'
                    {if} m√™s {in} meses_com_31_dias
                        dias = 31
                        {if} m√™s {in} meses_com30_dias
                            dias = 30
                    {if} m√™s = Fevereiro
                        anos_bissextos = 2020, 2024, 2028, 2036, 2040, 2044, 2028
                        ano = {ask} 'De que ano?'
                    {if} ano {in} anos_bissextos
                        dias = 29
                    {else}
                        dias = 28

                    {print} 'Aqui est√£o todos os dias de ' ms
                    {for} i {in} {range} 1 {to} dias
                        {print} i de m√™s
                    ```
            12:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {define} cumprimentar
                    cumprimentos = 'Ol√°', 'Como vai?', 'Boa tarde'
                        {print} cumprimentos {at} {random}

                    {define} anotar_pedido
                        comida = {ask} 'O que gostaria de comer?'
                        {print} '1 comida'
                        bebida = 'O que gostaria de beber?'
                        {print} '1 ' bebida
                        mais = {ask} 'Gostaria de algo mais?'
                            {if} mais {is} 'n√£o'
                        {print} 'OK'
                            {else}
                            {print} 'E ' mais
                    {print} 'Obrigado'

                    {print} 'Bem-vindo(a) ao nosso restaurante'
                    pessoas = {ask} 'H√° quantas pessoas em seu grupo?'
                    {for} i {in} {range} 0 {to} pessoas
                        {call} cumprimentar_cliente
                    ```
            13:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {define}recomenda√ß√£o_de_filme {with} nome
                        filmes_de_a√ß√£o == 'Duro de Matar', 'Velozes e Furiosos', 'Bastardos Ingl√≥rios'
                        filmes_de_romance = 'Simplesmente Amor', 'Di√°rio de uma Paix√£o', 'Titanic'
                        filmes_de_com√©dia = 'Mr Bean' 'Barbie''Deadpool'
                        filmes_infantis = 'Minions', 'As Aventuras de Paddington', 'Encanto'
                        {if} nome {is} 'Camila' {or} nome {is} 'Manuel'
                            filme_recomendado = filme_infantil {at} {random}
                        {if} nome {is} 'Pedro' {or} 'Gabriela'
                                humor = {ask} 'Est√° no humor de assistir o qu√™?'
                            {if} humor {is} 'a√ß√£o'
                                filme_recomendado = filmes_de_com√©dia {at} {random}
                            {if} humor {is} 'romance'
                                filme_recomendado = filmes_de_romance
                        {if} humor {is} 'com√©dia'
                                filme_recomendado = filmes_de_com√©dia {at} {random}

                    {print} 'Eu recomendaria ' filme_recomendado ' para ' nome

                    nome = {ask} 'Quem est√° assistindo?'
                    recomenda√ß√£o = {ask} 'Gostaria de uma recomenda√ß√£o?'
                    {if} recomenda√£o {is} 'sim'
                    {print} recomenda√ß√£o_de_filme {with} nome
                    {else}
                    {print} 'Sem problemas!'
                    ```
            14:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {define} calcular_batimentos
                        {print} 'Pressione levemente seus dedos √† lateral do seu pesco√ßo'
                        {print} '(logo abaixo do queixo)'
                        {print} 'Conte quantas batidas voc√™ sente em 15 segundos'
                        batidas == {ask} 'Quantas batidas voc√™ sente em 15 segundos?'
                        batimentos = batidas*4
                        {print} 'Seus batimentos s√£o de ' batimento
                        {if} batimentos >= 60 {or} batimentos <= 100
                            {print} 'Seus batimentos parecem normais'
                        {else}
                            {if} batimentos > 60
                                {print} 'Seus batimentos parecem estar muito baixos'
                            {if} batimentos < 100
                                {print} 'Seus batimentos parecem estar muito altos'
                            {print} 'Considere procurar um m√©dico'

                    medir_batimentos = {ask} 'Gostaria de medir seus batimentos card√≠acos?'
                    {if} medir_batimentos = 'sim'
                        {call} medir_batimentos
                    {else}
                        'sem problemas'
                    ```
            15:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este gerador de hist√≥rias aleat√≥rias. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    nomes = 'Tanya', 'Romy', 'Kayla', 'Aldrin', 'Ali'
                    verbos='andando', 'pulando', 'andando de bicicleta', 'dirigindo', 'correndo'
                    lugares = 'numa montanha', 'no supermercado', '√† piscina'
                    esconderijos = 'atr√°s de uma √°rvore', debaixo de uma mesa', em uma caixa'
                    sons = 'um trompete', 'um carro batendo', 'trov√£o'
                    causas_do_barulho = 'uma televis√£o', 'uma crian√ßa com fogos de artif√≠cio', 'um elefante m√°gico', 'um sonho'

                    nome_ escolhido = nomes {at} {random}
                    verbo_escolhido = verbos {at} {random}
                    lugar_escolhido = 'lugares {at} {random}'
                    sons_escolhidos = barulhos {at} {random}
                    esconderijo_escolhido = esconderijos {random}
                    causas_escolhidas = causas_do_barulho {at} {random}

                    {print} nome_escolhido ' estava ' verbo_escolhido ' ' lugar_escolhido
                    {print} 'quando, de repente, ouviu o som de ' sons {at} {random}
                    {print} nome_escolhido ' olhou em volta, mas n√£o conseguiu descobrir de onde veio o barulho.'
                    {print} nome_escolhido ' se escondeu ' esconderijo_escolhido'
                    {print} 'e tentou olhar em volta, mas n√£o conseguia ver nada de l√°'
                    escondido = 'sim'
                    {while} escondido = 'sim'
                        {print} nome_escolhido 'ainda n√£o via nada.'
                    resposta = {ask} 'Devia ' nome_escolhido ' sair de seu esconderijo?'
                        {if} resposta = 'sim'
                            escondido == 'n√£o'
                    {print} 'nome_escolhido saiu de seu esconderijo' esconderijo_escolhido
                    {print} 'E ent√£o viu que era s√≥' causa_escolhida
                    {print} nome_escolhido 'riu e continuou seu dia'
                    {print} Fim
                    ```
            16:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                    Dica: Certifique-se de mostrar a pontua√ß√£o s√≥ uma vez, no fim.
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    pa√≠s = ['Pa√≠ses Baixos', 'Pol√¥nia', 'Turquia', 'Zimb√°bue', 'Tail√¢ndia', 'Brasil', 'Peru', 'Austr√°lia', '√çndia', 'Rom√™nia' ]
                    capitais = 'Amsterd√£', 'Vars√≥via' 'Istambul', 'Harare', 'Bangkok', 'Bras√≠lia', 'Lima', 'Camberra', 'Nova Delhi', 'Bucareste'
                    pontua√ß√£o = 0
                    {for} i {in} {range} 0 {to} 10
                        resposta = {ask} 'Qual √© a capital de ' pa√≠ses[i]
                        correta = capital[i]
                        {if} resposta = correta
                            {print} 'Correto!'
                        pontua√ß√£o = pontua√ß√£o + 1
                        {else}
                            {print} 'Errado,' capitais[i] '√© a capital de' pa√≠ses[i]
                        {print} 'Voc√™ pontuou ' pontua√ß√£o ' de 10'

                    ```
            17:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este c√≥digo. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    {define} pedido_de_comida
                        coberturas = {ask} 'calabresa, atum, vegetais ou queijo?'
                        tamanho = {ask} 'grande, m√©dia ou pequena?'
                        n√∫mero_de_pizza = {ask} 'Quantas dessa pizza voc√™ vai querer?'

                        {print} 'VOC√ä PEDIU'
                        {print} n√∫mero_de_pizzas ' pizzas de  ' recheio ' tamanho ' tamanho

                    {define} pedido_de_bebida
                        bebida = {ask} '√°gua, coca, guaran√°, limonada ou caf√©?'
                        n√∫mero_de_bebidas = {ask} 'Quantas dessa bebida voc√™ vai querer?'

                        {print} 'VOC√ä PEDIU'
                        {print} n√∫mero_de_bebidas ' ' bebida

                    'Bem-vindo(a) √† pizzaria Hedy'
                    mais_comida = {ask} 'Gostaria de pedir uma pizza?'
                    {while} mais_comida = 'sim'
                        {return} pedido_de_comida
                        mais_comida = {ask} 'Gostaria de pedir uma pizza?'
                    mais_bebidas = {ask} 'Gostaria de pedir bebidas?'
                    {while} mais_bebidas == 'sim'
                        {call} pedido_de_bebida
                        mais_bebidas == {ask} 'Gostaria de pedir mais bebidas?'


                    {print} 'Agradecemos pelo pedido!'
                    ```
            18:
                story_text: |-
                    ### Exerc√≠cio
                    Depure este programa do Velho MacDonald do n√≠vel 16. Boa sorte!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo precisa ser depurado!**
                    ```
                    animais = ['porco', 'c√£o', 'vaca']
                    sons = ['oinc', 'au', 'mu']
                    {for} i {in} {range} 1 {to} 3
                        animal = animais[i]
                        som = sons[i]
                        {print} 'O Velho MacDonald tinha uma fazenda'
                        {print} 'I-A-I-A-√î!'
                        {print} 'e nessa fazenda ele tinha um(a) ' animal
                        {print} 'I-A-I-A-√î!'
                        {print} 'com um ' som som ' pra c√°'
                        {print} 'e um ' som som ' pra l√°'
                        {print} som ' pra c√°'
                        {print} som ' pra l√°'
                        {print} som som ' em todo lugar'
                    ```
    default:
        name: Introdu√ß√£o
        default_save_name: intro
        description: Explica√ß√£o do n√≠vel
        levels:
            1:
                story_text: |
                    Bem-vindo(a) √† Hedy! No N√≠vel 1 voc√™ pode come√ßar imprimindo um texto.

                    Experimente o c√≥digo voc√™ mesmo(a)! O bot√£o amarelo copia o c√≥digo exemplo ao seu campo de programa√ß√£o.
                    Depois, aperte o bot√£o verde escrito "Executar c√≥digo" embaixo do campo de programa√ß√£o para executar o c√≥digo.

                    Preparado(a)? Ent√£o v√° para a pr√≥xima aba para aprender a fazer seus pr√≥prios c√≥digos!
                example_code: |
                    ```
                    {print} Ol√° mundo!
                    ```
            2:
                story_text: |
                    Parab√©ns! Voc√™ chegou ao n√≠vel 2.Voc√™ provavelmente j√° fez alguns c√≥digos incr√≠veis!
                    No primeiro n√≠vel voc√™ pode ter notado que o comando `{echo}` s√≥ pode salvar um pouco de informa√ß√£o de cada vez.
                    Por exemplo, na aventura no restaurante, voc√™ podia ecoar o que o cliente queria comer, ou o que ele queria beber, mas n√£o os dois em uma mesma frase.
                    Isso muda no n√≠vel 2. No n√≠vel 2 voc√™ vai aprender a trabalhar com vari√°veis, que lhe permitem salvar m√∫ltiplos peda√ßos de informa√ß√µes e imprimi-los onde voc√™ quiser.
                    Ent√£o vamos para a pr√≥xima aba!
                example_code: |
                    **Aten√ß√£o! Este c√≥digo n√£o ir√° funcionar!**
                    Na Hedy, comandos v√£o mudar √†s vezes. `{echo}`, por exemplo, s√≥ funciona no n√≠vel 1. Nesse n√≠vel, voc√™ aprender√° uma maneira melhor de repetir as respostas.
                    ```
                    {print} Bem-vindo(a) ao Hedy's
                    {ask} O que gostaria de comer?
                    {echo} Ent√£o voc√™ quer
                    {ask} O que gostaria de beber?
                    {echo} Ent√£o voc√™ quer
                    ```
            3:
                story_text: |
                    No √∫ltimo n√≠vel voc√™ aprendeu o que √© uma vari√°vel e como us√°-las para fazer sua aventura mais interativa.
                    Mas... isso n√£o √© a √∫nica coisa que voc√™ pode fazer com vari√°veis! Voc√™ tamb√©m pode usar vari√°veis para fazer listas.
                    E voc√™ pode at√© deixar a Hedy escolher uma palavra aleat√≥ria da lista, o que lhe permite criar jogos de verdade!
                    D√™ uma olhada na pr√≥xima aba!
            4:
                story_text: |
                    Nos n√≠veis anteriores, voc√™ esteve praticando com vari√°veis, mas talvez voc√™ tenha passado por este problema.
                    Voc√™ pode ter tentado executar um programa desse jeito:

                    √â claro que voc√™ queria imprimir

                    `Meu nome √© Sofia`

                    mas Hedy imprimiu

                    `Meu Sofia √© Sofia`.

                    Neste n√≠vel, esse problema √© resolvido usando aspas.
                example_code: |
                    ```
                    nome {is} Sofia
                    {print} Meu nome √© nome
                    ```
            5:
                story_text: |
                    Nos n√≠veis anteriores, voc√™ j√° aprendeu a usar `{at} {random}`, que fez seus jogos serem diferentes toda vez que voc√™ os executava.
                    Mas n√£o chega a ser interativo, o(a) jogador(a) n√£o tem qualquer influ√™ncia sobre o que acontece no jogo.

                    Neste n√≠vel, voc√™ vai aprender o comando `{if}`, que permite que voc√™ d√™ respostas diferentes em seu programa. Assim, voc√™ pode programar uma senha secreta para seu computador, por exemplo.
                    Ent√£o vamos para a pr√≥xima aba aprender o novo comando!
                example_code: |
                    ```
                    senha {is} {ask} 'Qual √© a senha correta?'
                    ```
            6:
                story_text: |
                    No n√≠vel anterior, voc√™ praticou com `{ask}` e `{if}`. Voc√™ pode, por exemplo, perguntar aos fregueses o que eles gostariam de comer.
                    O que voc√™ ainda n√£o pode, no entanto, √© calcular o pre√ßo do jantar de todo mundo.

                    O pr√≥ximo n√≠vel possibilita fazer adi√ß√µes, subtra√ß√µes e multiplica√ß√µes em seus programas. Assim, voc√™ pode calcular os pre√ßos em seu restaurante, mas voc√™ tamb√©m poderia adicionar um c√≥digo secreto para dar a seus amigos e fam√≠lia um desconto.
                    Outra op√ß√£o no pr√≥ximo n√≠vel √© programar seu pr√≥prio jogo de matem√°tica, para seu irm√£ozinho ou irm√£zinha praticar multiplica√ß√£o.
                    V√° ver voc√™ mesmo(a)!
                example_code: |
                    ```
                    pre√ßo_da_comida {is} 0
                    pre√ßo_da_bebida {is} 0
                    pre√ßo_total {is} 0
                    {print} 'Bem-vindo(a) ao McHedy'
                    pedido {is} {ask} 'O que gostaria de comer?'
                    {if} pedido {is} hamb√∫rger pre√ßo_da_comida {is} 5
                    {if} pedido {is} fritas pre√ßo_da_comida {is} 2
                    bebida {is} {ask} 'O que gostaria de beber?'
                    {if} bebida {is} √°gua pre√ßo_da_bebida {is} 0
                    {else} pre√ßo_da_bebida {is} 3
                    pre√ßo_total {is} pre√ßo_da_comida + pre√ßo_da_bebida
                    {print} 'Vai custar ' pre√ßo_total ' reais, por gentileza'
                    ```
            7:
                story_text: |
                    √ìtimo trabalho! Voc√™ chegou ao pr√≥ximo n√≠vel, o que significa que voc√™ praticou com `{if}` e `{else}`. Voc√™ provavelmente notou que seus c√≥digos est√£o ficando mais e mais longos.
                    Por exemplo, se voc√™ quiser programar 'Parab√©ns pra Voc√™' (vers√£o simplificada).

                    √â muito c√≥digo para imprimir praticamente as mesmas palavras de novo e de novo. Por sorte, na pr√≥xima aba, voc√™ ir√° aprender uma solu√ß√£o com o comando `{repeat}`, que permite que voc√™ repita uma mesma linha de c√≥digo v√°rias vezes.
                example_code: |
                    ```
                    {print} 'parab√©ns pra voc√™'
                    {print} 'parab√©ns pra voc√™'
                    {print} 'parab√©ns querida Hedy'
                    {print} 'parab√©ns pra voc√™'
                    ```
            8:
                story_text: |
                    Agora voc√™ sabe como repetir uma √∫nica linha de c√≥digo. Isso √© √∫til, mas nem sempre √© suficiente. √Äs vezes voc√™ quer repetir v√°rias linhas de uma vez.
                    Este n√≠vel permite que voc√™ agrupe algumas linhas de c√≥digo e repita aquele grupo inteiro de linhas de uma vez!
                example_code: |
                    ```
                    {repeat} 5 {times} {print} 'Na pr√≥xima aba voc√™ vai poder repetir v√°rias linhas de c√≥digo por vez!'
                    ```
            9:
                story_text: |
                    √ìtimo trabalho! Voc√™ alcan√ßou mais um n√≠vel novo! No n√≠vel anterior, voc√™ aprendeu a usar m√∫ltiplas linhas de c√≥digo nos comandos {if} e {repeat}. Mas voc√™ ainda n√£o p√¥de combinar os dois...
                    Boas not√≠cias! Neste n√≠vel, voc√™ ter√° permiss√£o de colocar um {if} dentro de outro {if}, ou dentro de um comando {repeat}.
                example_code: |
                    ```
                    resposta = {ask} 'Voc√™ est√° pronto(a) para aprender algo novo?'
                    {if} resposta {is} sim
                        {print} '√ìtimo! Vamos aprender a usar o comando repita dentro do comando se!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                        {print} 'Hurra!'
                    {else}
                        {print} 'Talvez voc√™ deva praticar um pouco mais no n√≠vel anterior'
            10:
                story_text: |
                    Voc√™ est√° indo muito bem! Nos n√≠veis anteriores, ainda enfrent√°vamos um pequeno problema. Voc√™ aprendeu a repetir linhas, mas e se voc√™ quisesse mudar elas um pouco?
                    Por exemplo, se voc√™ quisesse cantar a can√ß√£o 'se voc√™ est√° contente', o c√≥digo seria assim:

                    Se voc√™ tamb√©m quisesse o verso seguinte 'bata os p√©s', depois o pr√≥ximo, depois o pr√≥ximo, voc√™ teria que mudar o c√≥digo completamente.
                    Neste n√≠vel, voc√™ vai aprender o comando `{for}`, que permite que voc√™ fa√ßa uma lista de a√ß√µes e repita o c√≥digo com uma a√ß√£o diferente em cada vez!
                    V√° dar uma olhada!
                example_code: |
                    ```
                    {repeat} 2 {times}
                        {print} 'se voc√™ est√° contente bata palmas'
                    {print} 'se voc√™ est√° contente e quer mostrar pra toda gente'
                    {print} 'se voc√™ est√° contente bata palmas'
                    ```
            11:
                story_text: |
                    Voc√™ chegou ao n√≠vel 11, est√° indo muito bem! Conforme os n√≠veis aumentam, Hedy foca cada vez mais em te ensinar a linguagem de programa√ß√£o Python.
                    Em Python, n√£o h√° um comando `{repeat}`, mas existe um comando que funciona da mesma forma que `{repeat}`. Ficou curioso(a) para saber como dizer `{repeat}` na linguagem Python? R√°pido, vamos descobrir!
            12:
                story_text: |
                    Talvez voc√™ tenha tentado usar n√∫meros decimais na sua aventura do restaurante. Se sim, voc√™ provavelmente notou que Hedy n√£o os entendia ainda e sempre os arredondava.
                    A partir deste n√≠vel, voc√™ pode usar n√∫meros decimais.
                example_code: |
                    ```
                    {print} 'Dois e meio mais dois e meio √©...'
                    {print} 2.5 + 2.5
                    ```

                    {print} 2.5 + 2.5
            13:
                story_text: |
                    Nos n√≠veis anteriores, voc√™ aprendeu a colocar dois comandos `{if}` um dentro do outro. Funciona bem, mas tamb√©m resulta em c√≥digos longos e desajeitados como este:

                    Neste sistema, voc√™ precisa dar o nome de usu√°rio e senha ambos corretos.
                    Neste n√≠vel, voc√™ aprender√° o comando `{and}`, que deixar√° este c√≥digo muito mais curto e compreens√≠vel!
                    Confira!
                example_code: |
                    ```
                    usu√°rio = {ask} 'Qual √© o seu nome de usu√°rio?'
                    senha = {ask} 'Qual √© a sua senha?'
                    {if} usu√°rio {is} 'Hedy'
                        {if} senha {is} 'secreta'
                            {print} 'Bem-vinda Hedy!'
                        {else}
                            {print} 'Acesso negado'
                    {else}
                        {print} 'Acesso negado!'
                    ```
            14:
                story_text: |
                    Com o programa abaixo, voc√™ pode calcular sua m√©dia e ver se voc√™ passou em uma mat√©ria da escola (nesse caso, com uma m√©dia de 6 ou mais).
                    Voc√™ pode ver que esse c√≥digo √© extremamente ineficiente, devido √† linha 5 ser t√£o longa.
                    Todas as diferentes m√©dias de 1 a 5 tiveram de ser programadas separadamente. Sorte a sua que, nesse n√≠vel, voc√™ ir√° aprender a fazer isso sem usar esse c√≥digo gigante!
                example_code: |
                    ```
                    primeira_nota = {ask} 'Quanto voc√™ tirou na primeira prova?'
                    segunda_nota = {ask} 'Quanto voc√™ tirou na segunda prova?'
                    somadas = primeira_nota + segunda_nota
                    m√©dia = somadas / 2
                    {if} m√©dia = 1 {or} m√©dia = 2 {or} m√©dia = 3 {or} m√©dia = 4 {or} m√©dia = 5
                        {print} 'Oh n√£o! Voc√™ reprovou na mat√©ria...'
                    {else}
                        {print} 'Excelente! Voc√™ passou na mat√©ria!'
                    ```
            15:
                story_text: |
                    No jogo abaixo, um c√≥digo foi feito para ter certeza que o(a) jogador(a) pode jogar por quanto tempo quiser...
                    Mas esse c√≥digo √© ineficiente e longo demais. Al√©m do mais, e se o(a) jogador(a) quiser jogar 101 vezes ao inv√©s de 100?
                    N√£o se pode jogar infinitamente?
                    Neste n√≠vel, voc√™ ir√° aprender um comando que deixa tudo isso mais f√°cil!
                example_code: |
                    ```
                    jogo = 'ligado'
                    {for} i {in} {range} 1 {to} 100
                        {if} jogo == 'ligado'
                            resposta = {ask} 'Voc√™ quer continuar?'
                            {if} resposta == 'n√£o'
                                jogo = 'terminado'
                            {if} resposta == 'sim'
                                {print} 'Certo, vamos continuar'
                    ```
            16:
                story_text: |
                    Neste n√≠vel, vamos nos aproximar um pouco mais de c√≥digo real de Python. Voc√™ tamb√©m ir√° aprender como usar duas listas em conjunto, relacionando seus valores.
                    Assim, voc√™ pode programar um c√≥digo em que certo animal √© combinado com seu respectivo som.
                    Porque os dois c√≥digos abaixo... N√£o fazem sentido algum!
                example_code: |-
                    ```
                    animais = 'galinha', 'cavalo', 'vaca'
                    sons = 'coc√≥', 'iiirrrr√≠', 'muuu'
                    {for} animal {in} animais
                        {print} 'Um(a) ' animal ' diz ' sons {at} {random}
                    ```
                    Voc√™ tamb√©m poderia tentar faz√™-lo funcionar deste jeito, mas....
                    ```
                    animais = 'galinha', 'cavalo', 'vaca'
                    sons = 'coc√≥', 'iiirrrr√≠', 'muuu'
                    {for} animal {in} animais
                        {for} som {in} sons
                            {print} 'Um(a) ' animal ' diz ' som
                    ```
                    Nota: Esses c√≥digos n√£o v√£o funcionar dessa maneira nesse n√≠vel. V√° √† pr√≥xima aba para ver quais partes voc√™ precisa corrigir.
            17:
                story_text: |
                    Agora vamos mudar um pouco a indenta√ß√£o. Toda vez que precisarmos de uma indenta√ß√£o, precisaremos colocar `:` na linha anterior a ela.

                    Neste n√≠vel, voc√™ tamb√©m pode usar um novo comando: `{elif}`. `{elif}` √© a jun√ß√£o de {else} com {if} e voc√™ precisar√° dele quando quiser fazer 3 (ou mais!) op√ß√µes.
                    Confira!
            18:
                story_text: |-
                    Chegamos ao c√≥digo Python real! Isso significa que precisamos usar par√™nteses com {print} e {range} de agora em diante.
                    {print}('Meu nome √© ', nome)
    dice:
        name: Dado
        default_save_name: Dado
        description: Fa√ßa seu pr√≥prio dado
        levels:
            3:
                story_text: |
                    Neste n√≠vel, podemos escolher algo de uma lista. Com isso, podemos deixar o computador escolher uma face do dado.
                    D√™ uma olhada nos jogos que voc√™ tem guardados em casa.
                    H√° algum jogo que usa um dado especial? Voc√™ tamb√©m pode copi√°-lo com esse c√≥digo.
                    Por exemplo, os dados do jogo Earthworms (Minhocas) t√™m faces numeradas de 1 a 5 e uma minhoca na sexta face.

                    ![Dado de Earthworms com faces numeradas de 1 a 5 e uma minhoca na sexta face](https://cdn.jsdelivr.net/gh/felienne/hedy@24f19e9ac16c981517e7243120bc714912407eb5/coursedata/img/dobbelsteen.jpeg)
                example_code: |
                    ```
                    escolhas {is} 1, 2, 3, 4, 5, minhoca
                    {print} Voc√™ tirou _ {at} {random} !
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Os dados no exemplo acima s√£o para um jogo espec√≠fico. Voc√™ consegue fazer dados normais?
                    Ou outros dados especiais para um jogo diferente?
                example_code_2: |
                    ```
                    escolhas {is} _
                    ```
            4:
                story_text: |
                    In this level we can make sentences with the die value in the sentence, with quotes of course.
                    This time the sample code is not quite complete. Can you finish the code?
            5:
                story_text: |
                    You can also make a die again in this level using the `{if}`.
                    Complete the sample code so that the code says "You can stop throwing" once you have thrown an earthworm.

                    But maybe you want to recreate a die from a completely different game. That's fine too! Then make up your own reaction. Eg 'yes' for 6 and 'pity' for something {else}.
                example_code: |
                    ```
                    escolhas {is} 1, 2, 3, 4, 5, minhoca
                    jogada {is} escolhas {at} {random}
                    {print} 'voc√™ tirou ' jogada
                    _ jogada {is} minhoca {print} 'Voc√™ pode parar de jogar.'
                    _ {print} 'Voc√™ ter√° de jogar de novo!'
                    ```
            6:
                story_text: |
                    Voc√™ tamb√©m pode refazer o dado do jogo Earthworms (Minhocas) aqui, mas desta vez voc√™ pode calcular sua pontua√ß√£o.
                    Nesse jogo, a minhoca vale 5 pontos. Agora, logo ap√≥s rolar os dados, voc√™ pode calcular imediatamente quantos pontos voc√™ tirou.
                    Este √© o c√≥digo para calcular pontos para um dado:

                    ### Exerc√≠cio
                    Voc√™ consegue mudar o c√≥digo de modo a calcular a pontua√ß√£o total de 8 dados? Para isso, voc√™ ter√° de copiar e colar algumas linhas de c√≥digo.
                example_code: |
                    ```
                    escolhas = 1, 2, 3, 4, 5, minhoca
                    pontos = 0
                    jogada = escolhas {at} {random}
                    {print} 'voc√™ tirou ' jogada
                    {if} jogada {is} minhoca pontos = pontos + 5 {else} pontos = pontos + jogada
                    {print} 'isso d√° ' pontos ' pontos'
                    ```
                example_code_2: |
                    Voc√™ conseguiu calcular a pontua√ß√£o para 8 dados? Precisou copiar e colar muitas vezes, n√©? Vamos deixar isso mais f√°cil no n√≠vel 7!
            7:
                story_text: |
                    Voc√™ tamb√©m pode fazer um dado novamente neste n√≠vel. Com o comando `{repeat}` voc√™ pode facilmente rolar uma m√£o cheia de dados.

                    ### Exerc√≠cio
                    Tente finalizar o c√≥digo amostra!  **Extra** Pense num jogo que voc√™ conhece que envolve dados e o programe usando um `{repeat}`.
                example_code: |
                    ```
                    escolhas = 1, 2, 3, 4, 5, 6
                    _ _ _ _ _ _ _
                    ```
            10:
                story_text: |
                    ### Exerc√≠cio
                    Est√£o todos demorando demais para jogar os dados? Neste n√≠vel voc√™ pode deixar Hedy jogar todos os dados de uma vez!
                    Mude os nomes para os nomes de seus amigos ou fam√≠lia, e finalize o c√≥digo para que cada um deles jogue.
                example_code: |
                    ```
                    jogadores = Ana, John, Jessie
                    escolhas = 1, 2, 3, 4, 5, 6
                    _ _ _ _
                        {print} jogador ' tirou ' escolhas {at} {random}
                        {sleep}
                    ```
            15:
                story_text: |
                    ### Exercise
                    In this level you can create a little game in which you'll have to throw 6 as fast as possible.
                    We have started the code, it's up to you to get the game to work!

                    Firstly, add a `{while}` loop that checks if 6 has been thrown or not.
                    As long as you haven't thrown 6 already, throw the dice on a random number.
                    Print what the player has thrown.
                    Add a try to the amount of tries
                    Wait a second before you throw again, or - in case you've thrown a 6 - before the game ends.
                example_code: |
                    ```
                    options = 1, 2, 3, 4, 5, 6
                    {print} 'Throw 6 as fast as you can!'
                    thrown = 0
                    tries = 0
                    _
                    _
                    _
                    _
                    _
                    {print} 'Yes! You have thrown 6 in ' tries ' tries.'
                    ```
    dishes:
        name: Pratos?
        default_save_name: Pratos
        description: Use o computador para decidir quem lava a lou√ßa
        levels:
            3:
                story_text: |
                    Voc√™ sempre discorda em casa sobre quem deve lavar a lou√ßa ou trocar a caixa de areia hoje?
                    Ent√£o voc√™ pode deixar o computador escolher de forma muito justa. Voc√™ pode programar isso neste n√≠vel!
                    Voc√™ primeiro faz uma lista dos membros de sua fam√≠lia. Em seguida, escolha '{at} {random}' na lista.
                example_code: |
                    ```
                    pessoas {is} m√£e, pai, Eva, Sofia
                    {print} pessoas {at} {random} √© quem vai lavar a lou√ßa
                    ```
                story_text_2: |
                    N√£o sente vontade de lavar a lou√ßa sozinho? Hackeie o programa para remover seu nome da lista.
            4:
                story_text: |
                    Com as aspas simples voc√™ pode deixar seu planejamento de lavagem de lou√ßa mais bonito.
                    Desta vez, o c√≥digo de exemplo n√£o est√° completo.

                    Voc√™ pode completar o c√≥digo preenchendo os espa√ßos em branco? Cada espa√ßo em branco deve ser substitu√≠do por uma palavra de s√≠mbolo.

                    Dica: N√£o se esque√ßa das aspas!
                example_code: |
                    ```
                    pessoas {is} m√£e, pai, Eva, Sofia
                    {print} _ os pratos s√£o limpos por _
                    {sleep}
                    {print} pessoas {at} _
                    ```
            5:
                story_text: |
                    Com o `{if}` agora voc√™ pode se divertir mais com a escolha do programa. Voc√™ pode fazer com que seu programa responda √† escolha que o computador fez.

                    Voc√™ pode terminar o c√≥digo para que ele imprima 'muito ruim' quando for sua vez e, caso contr√°rio, 'sim!'?
                    N√£o se esque√ßa das aspas simples!
                example_code: |
                    ```
                    pessoas {is} m√£e, pai, Eva, Sofia
                    lavador {is} pessoas {at} {random}
                    _ lavador {is} Sofia {print} _ pena que tenho que lavar os pratos _
                    _ {print} 'felizmente sem pratos para lavar porque ' _ ' j√° est√° lavando'
                    ```
            6:
                story_text: |
                    Quantas vezes todo mundo vai lavar a lou√ßa? Isso √© justo? Voc√™ pode cont√°-lo neste n√≠vel.
                example_code: |
                    ```
                    pessoas = m√£e, pai, Eva, Sofia
                    vezes_eva_lava = 0
                    lavador = pessoas {at} {random}
                    {print} lavador ' √© quem vai lavar a lou√ßa'
                    {if} lavador {is} Eva vezes_eva_lava = vezes_eva_lava + 1
                    {print} 'Eva vai lavar a lou√ßa ' vezes_eva_lava ' vezes essa semana'
                    ```

                    Agora voc√™ pode copiar as linhas 3 a 5 algumas vezes (para uma semana, 7 vezes) e calcular para uma semana inteira novamente.
                    Voc√™ consegue fazer o c√≥digo funcionar para a semana inteira?
                story_text_2: |
                    Se voc√™ tiver uma extrema falta de sorte, o programa anterior pode escolher voc√™ para lavar a lou√ßa a semana inteira! N√£o √© justo!
                    Para criar um sistema mais justo, voc√™ pode usar o comando `{remove}` para remover a pessoa escolhida da lista. Assim voc√™ n√£o precisa lavar a lou√ßa de novo at√© que todos tenham tido sua vez.

                    Segunda e Ter√ßa j√° est√£o prontos para voc√™! Voc√™ consegue adicionar o resto da semana?
                    E... voc√™ consegue pensar em uma solu√ß√£o para quando a lista ficar vazia?
                example_code_2: |
                    ```
                    pessoas = m√£e, pai, Eva, Sofia
                    lavador = pessoas {at} {random}
                    {print} 'Segunda-feira quem lava a lou√ßa √©: ' lavador
                    {remove} lavador {from} pessoas
                    lavador = pessoas {at} {random}
                    {print} 'Ter√ßa-feira quem lava a lou√ßa √©: ' lavador
                    {remove} lavador {from} pessoas
                    ```
            7:
                story_text: |
                    Com o `{repeat}` voc√™ pode repetir peda√ßos de c√≥digo. Voc√™ pode us√°-lo para calcular para m√∫ltiplos dias quem vai lavar a lou√ßa!
                    ### Exerc√≠cio
                    Use o comando `{repeat}` para decidir quem vai lavar a lou√ßa em cada dia de uma semana inteira. Cada lacuna precisa ser preenchida com um comando ou n√∫mero!
                    **Extra** Voc√™ consegue pensar em outras tarefas na casa? Ajuste o c√≥digo para que decida em tr√™s afazeres dom√©sticos. N√£o se esque√ßa de imprimir quais s√£o os afazeres em quest√£o!
                example_code: |
                    ```
                    pessoas = m√£e, pai, Eva, Sofia
                    {repeat} _ _ {print} 'A lou√ßa ser√° lavada por ' _ _ _
                    ```
            10:
                story_text: |
                    Neste n√≠vel, voc√™ poder√° fazer um cronograma para a semana inteira de uma maneira mais f√°cil!

                    ### Exerc√≠cio
                    Adicione uma segunda tarefa, como aspirar ou arrumar, e certifique-se de tamb√©m divid√≠-la para a semana inteira.
                    <br> **Extra** O programa n√£o √© justo, voc√™ pode ter azar e ter de lavar a lou√ßa a semana toda. De que modo voc√™ poderia deixar o programa mais justo?
                example_code: |
                    ```
                    dias = Segunda, Ter√ßa, Quarta, Quinta, Sexta, S√°bado, Domingo
                    nomes = m√£e, pai, Eva, Sofia
                    {for} dia {in} dias
                        {print} nomes {at} {random} ' ir√° lavar a lou√ßa ' dia
                    ```
    elif_command:
        name: '{elif}'
        default_save_name: sen√£o se
        description: '{elif}'
        levels:
            17:
                story_text: |
                    Neste n√≠vel, voc√™ tamb√©m pode usar um novo comando: `{elif}`. `{elif}` √© a jun√ß√£o de `{else}` com `{if}` e voc√™ precisar√° dele quando quiser fazer 3 (ou mais!) op√ß√µes.
                    Confira!
                example_code: |
                    ```
                    pr√™mios = ['1 milh√£o de reais', 'uma torta de ma√ß√£', 'nada']
                    seu_pr√™mio = pr√™mios[{random}]
                    {print} 'Voc√™ ganhou ' seu_pr√™mio
                    {if} seu_pr√™mio == '1 milh√£o de reais' :
                        {print} '√â isso a√≠! Voc√™ est√° rico(a)!'
                    {elif} seu_pr√™mio == 'uma torta de ma√ß√£' :
                        {print} 'Que del√≠cia, uma torta de ma√ß√£!'
                    {else}:
                        {print} 'Mais sorte na pr√≥xima..'
                    ```
    for_command:
        name: '{for}'
        default_save_name: para
        description: comando {for}
        levels:
            10:
                story_text: |-
                    ## Para
                    Neste n√≠vel, aprenderemos um c√≥digo novo chamado `{for}`. Com `{for}` voc√™ pode fazer uma lista e usar todos os elementos.
                    `{for}` cria um bloco, assim como `{repeat}` e `{if}`, ent√£o todas as linhas do bloco precisam come√ßar com 4 espa√ßos a mais.
                example_code: |
                    ```
                    animais = cachorro, gato, peixe-bolha
                    {for} animal {in} animais
                        {print} 'Eu amo ' animal
                    ```
            11:
                story_text: |-
                    In this level, we add a new form of the `{for}`. In earlier levels, we used `{for}` with a list, but we can also use `{for}` with numbers.
                    We do that by adding a variable name, followed by  `{in}` `{range}`. We then write the number to start at, `{to}` and the number to end at.
                    Try the example to see what happens! In this level again, you will need to use indentations in lines below the `{for}` statements.
                example_code: |
                    ```
                    {for} contador {in} {range} 1 {to} 10
                        {print} contador
                    {print} 'Prontos ou n√£o, l√° vou eu!'
                    ```
            17:
                story_text: |
                    Agora vamos mudar um pouco a indenta√ß√£o. Toda vez que precisarmos de uma indenta√ß√£o, precisaremos colocar `:` na linha anterior a ela.
                example_code: |
                    ```
                    {for} i {in} {range} 1 {to} 10:
                        {print} i
                    {print} 'Prontos ou n√£o, l√° vou eu!'
                    ```
    fortune:
        name: Vidente
        default_save_name: Vidente
        description: Deixe Hedy prever o futuro
        levels:
            1:
                story_text: |
                    Voc√™ j√° foi a um parque de divers√µes e teve seu futuro previsto por uma cartomante? Ou voc√™ j√° jogou com uma bola oito m√°gica?
                    Ent√£o voc√™ provavelmente sabe que eles n√£o podem prever seu futuro, mas ainda √© divertido de jogar!

                    Nos pr√≥ximos n√≠veis, voc√™ pode aprender a criar sua pr√≥pria m√°quina de adivinha√ß√£o!
                    No n√≠vel 1 voc√™ pode come√ßar de leve, deixando a Hedy se apresentar como uma cartomante e deix√°-la repetir com {echo} as respostas dos jogadores.
                    Dessa forma:
                example_code: |
                    ```
                    _ Ol√°, sou Hedy, a vidente!
                    _ Quem √© voc√™?
                    _ Deixe-me dar uma olhada na minha bola de cristal
                    _ Eu vejo... eu vejo...
                    _ Seu nome √©
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo √† sua tela de entrada e preencha as lacunas para fazer o c√≥digo funcionar.
                    **Extra** Altere o c√≥digo e deixe que a vidente preveja n√£o apenas seu nome, mas tamb√©m sua idade, seu time favorito ou algo mais sobre voc√™.
            3:
                story_text: |
                    In the previous levels you've created your first fortune telling machine, but Hedy couldn't really predict anything, only {echo}.
                    In this level you can use a variable and the `{at} {random}` command to really let Hedy choose an answer for you. Check out this code for instance:
                example_code: |
                    ```
                    {print} Eu sou Hedy, a vidente!
                    pergunta {is} {ask} O que voc√™ quer saber?
                    {print} Isso √© o que voc√™ quer saber: pergunta
                    respostas {is} sim, n√£o, talvez
                    {print} Minha bola de cristal diz...
                    {sleep} 2
                    {print} respostas {at} {random}
                    ```
                story_text_2: |
                    ### Exercises
                    Now, Hedy can only answer yes, no or maybe. Can you give Hedy more answer options, like 'definitely' or '{ask} again'.
            4:
                story_text: |
                    ### Exerc√≠cio
                    N√≥s removemos todas as aspas deste c√≥digo exemplo, voc√™ consegue adicion√°-las nos lugares certos?

                    ### Exerc√≠cio 2
                    Volte ao n√≠vel anterior e copie o seu c√≥digo da vidente. Fa√ßa aquele c√≥digo funcionar neste n√≠vel adicionando as aspas nos locais certos.
                example_code: |
                    ```
                    _ Adicione as aspas a este c√≥digo _
                    {print} Sou Hedy, a vidente!
                    pergunta {is} {ask} O que voc√™ quer saber?
                    {print} Essa √© sua pergunta:  pergunta
                    respostas {is} sim, n√£o, talvez
                    {print} Minha bola de cristal diz...
                    {sleep} 2
                    {print} respostas {at} {random}
                    ```
            5:
                story_text: |
                    ### Exerc√≠cio
                    No c√≥digo exemplo abaixo, voc√™ pode ver como se faz um programa de vidente que permite que voc√™ incline as probabilidades a seu favor. Esse programa trapaceiro sempre diz que voc√™ vai ganhar na loteria, mas seus amigos nunca v√£o ganhar.

                    Use isso para fazer seu pr√≥prio programa, seja criativo(a)! Voc√™ poderia, por exemplo, fazer um programa que prev√™ que:
                    * seu time favorito vai derrotar todos os competidores!
                    * seu filme favorito ser√° escolhido para a noite de filme!
                    * voc√™ ganhar√° ingressos para seu show favorito!
                    * voc√™ √© a mais bela de todas, como o espelho da Branca de Neve.
                    Deixe sua imagina√ß√£o fluir!

                    Seu programa deve conter pelo menos 10 linhas de c√≥digo e ter pelo menos um comando `{if}` e um `{else}`.
                example_code: |
                    ```
                    amigos {is} Jorge, L√∫cia, Davi
                    {print} 'Posso prever se voc√™ ganhar√° na loteria amanh√£!'
                    pessoa {is} {ask} 'Quem √© voc√™?'
                    resposta_boa {is} Oba! Voc√™ ganhou!, Voc√™ certamente vai ganhar!, Temos um vencedor!
                    resposta_ruim {is} Sem sorte! Tente novamente!, Outra pessoa vai ganhar, Voc√™ perdeu!
                    {if} pessoa {in} amigos {print} resposta_boa {at} {random}
                    {else} {print} resposta_ruim {at} {random}
                    ```
            6:
                story_text: |
                    In this level you can use math in your predictions as a fortune teller. This allows you to make up (silly) formulas to calculate the future.
                    For example you could calculate how rich you'll get or how many kids you will have when you grow up.
                example_code: |
                    ```
                    {print} 'Eu sou Hedy, a vidente!'
                    {print} 'Eu posso prever quantos filhos/filhas voc√™ ter√° quando crescer!'
                    idade = {ask} 'Quantos anos voc√™ tem?'
                    irm√£os = {ask} 'Quantos irm√£os/irm√£s voc√™ tem?'
                    altura = {ask} 'Qual a sua altura em cent√≠metros?'
                    filhos = altura / idade
                    filhos = filhos - irm√£os
                    {print} 'Voc√™ ter√°...'
                    {sleep}
                    {print} filhos ' filhos(as)!'
                    ```
            7:
                story_text: |
                    ### Exerc√≠cio
                    Termine este programa que diz se seu/sua crush tamb√©m te ama ou n√£o.
                example_code: |
                    ```
                    {print} 'Eu tenho uma flor com p√©talas m√°gicas'
                    {print} 'Se voc√™ tirar as p√©talas, a flor te dir√° se seu/sua crush tamb√©m te ama'
                    quantidade = {ask} 'Quantas p√©talas voc√™ quer tirar?'
                    op√ß√µes = bem te quer, mal te quer
                    _ _ _ _ op√ß√µes {at} {random}
                    ```
            8:
                story_text: |
                    In the previous levels you've learned how to use repeat to make the fortune teller answer 3 questions in a row, but we had a problem with printing the questions.
                    Now that problem is solved, because of the new way of using the repeat command.
                    In the next example you can have your fortune teller {ask} 3 questions and also print them!
                example_code: |
                    ```
                    {print} 'Eu sou Hedy, a vidente!'
                    {print} 'Voc√™ pode me fazer 3 perguntas.'
                    respostas = sim, n√£o, talvez
                    _ _ _
                       pergunta = {ask} 'O que voc√™ quer saber?'
                       {print} pergunta
                       {sleep}
                       {print} 'Minha bola de cristal diz... ' answers {at} {random}
                    ```
            10:
                story_text: |
                    In this level you'll learn how to program the game MASH (mansion, apartement, shack, house). In this game you can predict for all the players at once, what their future will look like.
                example_code: |
                    ```
                    houses = mansion, apartment, shack, house
                    loves = nobody, a royal, their neighbour, their true love
                    pets = dog, cat, elephant
                    names = Jenna, Ryan, Jim
                    _
                        {print} name ' lives in a ' houses {at} {random}
                        {print} name ' will marry ' loves {at} {random}
                        {print} name ' will get a ' pets {at} {random} ' as their pet.'
                        {sleep}
                    ```
            12:
                story_text: |
                    In this level you can make your fortunes multiple words. Like in this example below:
                example_code: |
                    ```
                    fortunes = 'you will slip on a banana peel', _
                    {print} 'I will take a look in my crystal ball for your future.'
                    {print} 'I see... I see...'
                    {sleep}
                    {print} fortunes {at} {random}
                    ```
    functions:
        name: functions
        default_save_name: fun√ß√µes
        description: functions
        levels:
            12:
                story_text: |
                    In this level you'll learn how to use **functions**. A function is a block of code you can easily use multiple times. Using functions helps us organize pieces of code that we can use again and again.
                    To create a function, use `{define}` and give the function a name. Then put all the lines you want in the function in a indented block under the `{define}` line.
                    Leave one empty line in your code to make it look nice and neat. Great job! You have created a function!

                    Now, whenever we need that block of code, we just use <code>{call}</code> with the function's name to call it up! We don't have to type that block of code again.

                    Check out this example code of a game of Twister. The function 'turn' contains a block of code that chooses which limb should go where.

                    ### Exercise
                    Finish this code by setting the 2 variables chosen_limb and chosen_color.
                    Then, choose how many times you want to call the function to give the twister spinner a spin.

                    ### Exercise 2
                    Improve your code by adding a variable called 'people'. Use the variable to give all the players their own command in the game.
                    For example: 'Ahmed, right hand on green' or 'Jessica, left foot on yellow'.
                example_code: |
                    ```
                    sides = 'left', 'right'
                    limbs = 'hand', 'foot'
                    colors = 'red', 'blue', 'green', 'yellow'

                    {define} turn
                        chosen_side = sides {at} {random}
                        chosen_limb = limbs _
                        chosen_color = colors _
                        {print} chosen_side ' ' chosen_limb ' on ' chosen_color

                    {print} 'Lets play a game of Twister!'
                    {for} i {in} {range} 1 to _
                        {call} turn
                        {sleep} 2
                    ```
            13:
                story_text: |
                    Now that you've learned how to use functions, you'll learn how to use a function with an argument.
                    An **argument** is a variable that is used within a function. It is not used outside the function.

                    For example in this code we've programmed the first verse of the song 'My Bonnie is over the ocean'.
                    In this example code the argument `place` is used. Place is a variable that is only used in the function, so an argument.
                    To use `place` we have programmed the line `define song with place`.
                    When the function is called, computer will replace the argument `place`, with the piece of text after `call song with`.

                    ### Exercise
                    The next verse of this song goes:

                    Last night as I lay on my pillow
                    Last night as I lay on my bed
                    Last night as I lay on my pillow
                    I dreamed that my Bonnie is dead

                    Can you program this verse in the same way as the example?
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is over the ' place

                    {call} song {with} 'ocean'
                    {call} song {with} 'sea'
                    {call} song {with} 'ocean'
                    ```
            14:
                story_text: |
                    In the previous levels you have learned to create functions and use arguments with them. Another great use of a function is to let it calculate something for you.
                    You can give the function a calculation and it will give you the answer of the calculation. This answer is called a **return value**.

                    For example, in this code the function calculate_new_price will calculate the new price of any item. It will give you the new price as a return value.

                    ### Exercise
                    Finish this code. We have already made the variable new_price for you, you only need to set it.
                    You should finish the line of code by calling the function that calculates the new price.
                example_code: |
                    ```
                    {define} calculate_new_price {with} amount, percentage
                        percentage = percentage / 100
                        discount_amount = amount * percentage
                        return amount - discount_amount

                    old_price = {ask} 'How much is on the price tag?'
                    discount = {ask} 'What percentage is the discount?'

                    new_price = _ calculate_new_price {with} old_price, _
                    {print} 'The new price is ' new_price ' dollar'
                    ```
    guess_my_number:
        name: Guess my number
        default_save_name: adivinhe o n√∫mero
        description: guess my number
        levels:
            14:
                story_text: |
                    In this level you can program the game 'Guess my number'

                    ### Exercise
                    Fill in the correct symbols on the blanks to get the game to work.
                example_code: |
                    ```
                    {print} 'Guess my number'
                    numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                    number = numbers {at} {random}
                    game = 'on'
                    {for} i {in} {range} 1 {to} 10
                        {if} game == 'on'
                            guess = {ask} 'Which number do you think it is?'
                            {if} guess _ number
                                {print} 'Lower!'
                            {if} guess _ number
                                {print} 'Higher!'
                            {if} guess _ number
                                {print} 'You win!'
                                game = 'over'
                    ```
    harry_potter:
        name: Harry Potter
        default_save_name: Harry Potter
        description: Aventuras de Harry Potter
        levels:
            10:
                story_text: |
                    ### Exercise
                    We can also make a Harry Potter themed fortune teller. Fill in blanks such that 9 lines are printed.
                    **Extra** Change the theme of the fortune teller into something else, such as your favorite book, film or tv show.
                example_code: |
                    ```
                    houses = Gryffindor, Slytherin, Hufflepuff, Ravenclaw
                    subjects = potions, defence against the dark arts, charms, transfiguration
                    fears = Voldemort, spiders, failing your OWL test
                    names = Harry, Ron, Hermione
                    _
                    _ {print} name ' is placed in ' houses {at} {random}
                    _ {print} name ' is great at ' subjects {at} {random}
                    _ {print} name 's greatest fear is ' fears {at} {random}
                    ```
    haunted:
        name: Casa mal-assombrada
        default_save_name: Casa mal-assombrada
        description: escape from the haunted house
        levels:
            1:
                story_text: |
                    Nesta aventura voc√™ est√° trabalhando para fazer um jogo no qual voc√™ tem que escapar de uma casa mal-assombrada escolhendo a porta correta.
                    Se voc√™ escolher a porta certa, voc√™ sobreviver√°, mas sen√£o um monstro terr√≠vel pode...

                    No n√≠vel 1 come√ßamos nosso jogo de casa mal-assombrada inventando uma hist√≥ria assustadora e perguntando ao jogador que monstro ele ver√° na casa mal-assombrada.
                example_code: |
                    ```
                    {print} Como eu cheguei aqui?
                    {print} Lembro-me de meu amigo me dizendo para entrar na antiga mans√£o...
                    {print} e de repente tudo ficou preto.
                    {print} Mas como eu acabei no ch√£o...?
                    {print} Minha cabe√ßa d√≥i como se eu tivesse sido atingido por um taco de beisebol!
                    {print} Que som √© esse?
                    {print} Oh n√£o! Eu sinto que n√£o estou sozinho nesta casa!
                    {print} Eu preciso sair daqui!
                    {print} H√° 3 portas na minha frente..
                    {ask} Qual porta devo escolher?
                    {echo} eu escolho a porta
                    {print} ...?
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo √† sua tela de entrada clicando no bot√£o amarelo.
                    Agora termine a hist√≥ria adicionando pelo menos 5 linhas de c√≥digo.
                    Lembre-se de come√ßar cada linha com um comando `{print}`.
            2:
                story_text: |
                    Nesta casa mal-assombrada, voc√™ pode escolher seus montros com emojis. Mas claro, voc√™ tamb√©m poderia usar palavras.
                example_code: |
                    ```
                    monstro_1 {is} üëª
                    monstro_2 {is} ü§°
                    monstro_3 {is} üë∂
                    {print} Voc√™ entra na casa mal-assombrada.
                    {print} De repente, voc√™ v√™ um monstro_1
                    {print} Voc√™ corre para a outra sala...
                    {print} Mas um monstro_2 est√° l√° te esperando!
                    {print} Oh n√£o! Voc√™ vai depressa at√© a cozinha.
                    {print} Mas ao entrar, um monstro_3 te ataca!
                    ```
                story_text_2: |
                    ### Exercise
                    In the example above the monsters are predetermined. So each time you run your code, the output is the same.
                    Can you add `{ask}` commands to make the haunted house interactive and have the players choose the monsters they come across?
                example_code_2: |
                    ```
                    monstro_1 {is} _
                    monstro_2 {is} _
                    monstro_3 {is} _
                    {print} Voc√™ entra na casa mal-assombrada.
                    {print} De repente, voc√™ v√™ um monstro_1
                    {print} Voc√™ corre para a outra sala...
                    {print} Mas um monstro_2 est√° l√° te esperando!
                    {print} Oh n√£o! Voc√™ vai depressa at√© a cozinha.
                    {print} Mas ao entrar, um monstro_3 te ataca!
                    ```
            3:
                story_text: |
                    In the previous levels you've made an introduction to your haunted house game, but as you might have noticed the story would always have a dreadful end.
                    In this level you can make your story more interactive by changing the outcome of the game; sometimes you'll get eaten, sometimes you'll escape!
                    Let Hedy decide randomly!
                example_code: |
                    ```
                    _ Escape from the haunted house!
                    _ There are 3 doors in front of you...
                    _ _ _ Which door do you choose?
                    _ You picked door ... choice
                    monsters _ a zombie, a vampire, NOTHING YOUVE ESCAPED
                    _ You see...
                    {sleep}
                    _ _ _ _
                    ```
            4:
                story_text: |
                    In this level you learn how to use quotation marks in your games.
                    Can you make your Haunted House level 4 proof?
                example_code: |
                    ```
                    {print} _Escape from the haunted house!_
                    {print} _There are 3 doors in front of you..._
                    choice {is} {ask} _Which door do you choose?_
                    {print} _You picked door ..._ choice
                    monsters {is} a zombie, a vampire, NOTHING YOUVE ESCAPED
                    {print} _You see..._
                    {sleep}
                    {print} monsters {at} {random}
                     ```
            5:
                story_text: |
                    Up until this level the haunted house game always asked the player to choose a door, but as you might have noticed, they didn't really have to answer correctly.
                    If the player filled in a completely random answer, the game would still work and the player might even win (despite not picking a door).
                    In this level you can only win the game by picking the same door Hedy picked randomly.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house!'
                    {print} 'There are 3 doors in front of you...'
                    doors {is} 1, 2, 3
                    monsters {is} werewolf, mummy, vampire, zombie
                    chosen_door {is} {ask} 'Which door do you choose?'
                    {print} 'You chose door...' chosen_door
                    {sleep}
                    correct_door {is} doors {at} {random}
                    _ _ _ _ {print} 'Great! Youve escaped!'
                    {else} {print} 'Oh no! You are being eaten by a...' monsters {at} {random}
                    ```
            9:
                story_text: |
                    In this level you can use nesting, which allows you to make the haunted house even more interactive!
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    player = alive
                    doors = 1, 2, 3
                    monsters = zombie, vampire, giant spider
                    {repeat} 3 {times}
                        {if} player {is} alive
                            correct_door {is} doors {at} {random}
                            {print} 'There are 3 doors in front of you...'
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} chosen_door {is} correct_door
                                {print} 'No monsters here!'
                            {else}
                                {print} 'You are eaten by a ' monsters {at} {random}
                                player = dead
                        {else}
                            {print} 'GAME OVER'
                    {if} player {is} alive
                        {print} 'Great! You survived!'
                    ```
            11:
                story_text: |
                    In this level we've changed the repeat command and we've added a line to our haunted house that tells the player in which room they are.
                example_code: |
                    ```
                    {print} 'Escape from the Haunted House!'
                    monsters = zombie, vampire, giant spider
                    _
                        {print} 'Room ' i
                        monster = monsters {at} {random}
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can use the `<` and `>` symbol to introduce lives to your game.
                    Make sure the player loses a life when they come across the wrong monster and that the game stops if you have no lives left.
                example_code: |
                    ```
                    {print} 'Escape from the haunted house'
                    lives = 3
                    doors = 1, 2, 3
                    monsters = 'the wicked witch', 'a zombie', 'a sleeping 3 headed dog'
                    {for} i {in} {range} 1 {to} 10
                        {if} lives _
                            good_door = doors {at} {random}
                            monster = monsters {at} {random}
                            chosen_door = {ask} 'Which door do you choose?'
                            {if} good_door == chosen_door
                                {print} 'You have chosen the correct door'
                            {else}
                                {print} 'You see...' monster
                                {if} monster == 'a sleeping 3 headed dog'
                                    {print} 'Pffieuw.... Its asleep'
                                {else}
                                    {print} 'You lose one life'
                                    lives = _
                        {else}
                            {print} 'GAME OVER'
                    ```
            16:
                story_text: |
                    ### Exercise
                    This haunted house game uses the connection between the lists you can use in this level.
                    For example: all the properties that belong to the zombie are first in all the lists, witch second and vampire third.
                    Check out the code and fill in  `weapons[i]`, `monsters[i]` , `bad_fate[i]`, `good_fate[i]`, `hint[i]` on the correct blanks to get the code to work!
                example_code: |
                    ```
                    numbers = [1, 2, 3]
                    i = numbers[{random}]
                    hint = ['growling', 'a cackling laugh', 'fluttering batwings']
                    monsters = ['zombie', 'witch', 'vampire']
                    bad_fate = ['Your brain is eaten', 'You are forever cursed', 'You are bitten']
                    good_fate = ['You throw the ham. The zombie is distracted and starts eating it.', 'You set the curtains on fire. The witch flees out of fear for the fire', 'The vampire hates garlic and flees']
                    weapons = ['ham', 'lighter', 'garlic']
                    {print} 'You are standing in front of an old mansion'
                    {print} 'Something is not right here'
                    {print} 'You hear ' _
                    {print} 'You are going to explore it'
                    {print} 'You enter the kitchen and see a lighter, a raw ham and a garlic.'
                    your_weapon = {ask} 'What do you bring with you?'
                    {print} 'With your ' your_weapon ' you enter the living room'
                    {print} 'There you find a ' _
                    needed_weapon = _
                    {if} your_weapon == needed_weapon
                        {print} 'You use your ' your_weapon
                        {print} _
                        {print} 'YOU WIN!'
                    {else}
                        {print} 'You have chosen the wrong weapon...'
                        {print} _
                        {print} 'GAME OVER'
                    ```
    hotel:
        name: hotel
        default_save_name: hotel
        description: hotel
        levels:
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, and you've learned how to combine it with an {ask}.
                    You might have wondered why you would use functions, because the functions in the example were only one line of code.
                    Now we will show you what a bigger function looks like and we will use multiple agruments now as well. You'll see how much better it is to use a function once the function gets bigger.
                    Here is an example of a function with arguments combined with {ask} commands.
                example_code: |
                    ```
                    {define} welcome_message {with} title, last_name, country, room_number
                        {print} 'Welcome to Hotel Hedy, ' title ' ' last_name
                        nice_trip {is} {ask} 'Did you have a nice trip from, ' country '?'
                        {if} nice_trip {is} 'yes'
                            {print} 'Lovely!'
                        {else}
                            {print} 'Sorry to hear that.'
                            {print} 'Hopefully you can take a nice rest in you room.'
                        {print} 'Your room number is ' room_number

                    {print} 'Hello. Please fill in your information to check in.'
                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
                    ```

                    title = {ask} 'What is your title (mr, mrs, ms, dr, etc.)?'
                    name = {ask} 'What is you last name?'
                    homecountry = {ask} 'What country do you come from?'

                    {call} welcome_message {with} title, name, homecountry, 105
    if_command:
        name: '{if} & {else}'
        default_save_name: comando_se
        description: Introduzindo o comando {if}
        levels:
            5:
                story_text: |
                    ## Se... sen√£o....
                    No n√≠vel 5, h√° um comando novo: o `{if}`! Com o `{if}` voc√™ pode escolher entre duas op√ß√µes diferentes.
                    Este c√≥digo imprime 'legal' se voc√™ digita Hedy como nome, e 'meh!' se voc√™ digita outra coisa.
                    `{ask}` e `{print}` ainda funcionam da mesma forma que no n√≠vel 4.
                example_code: |
                    ```
                    nome {is} {ask} 'qual √© o seu nome?'
                    {if} nome {is} Hedy {print} 'legal' {else} {print} 'meh!'
                    ```
                story_text_2: |
                    √Äs vezes, c√≥digos com um `{if}` ficam bem longos e n√£o cabem direito na linha. <br> Voc√™ tamb√©m pode dividir o c√≥digo em duas linhas, come√ßando a segunda linha com o `{else}`, assim:
                example_code_2: |
                    ```
                    nome {is} {ask} 'qual √© o seu nome?'
                    {if} nome {is} Hedy {print} 'legal'
                    {else} {print} 'meh!'
                    ```
                story_text_3: |
                    ### Exerc√≠cio
                    Tente criar seu pr√≥prio c√≥digo com `{if}` e `{else}`. Voc√™ pode usar o c√≥digo exemplo se quiser.
                example_code_3: |
                    ```
                    resposta {is} {ask} '2 + 2 = ?'
                    _ _ _ 4 _ '√ìtimo trabalho!'
                    _ _ 'N√£o, 2 + 2 = 4'
                    ```
            8:
                story_text: |
                    ## If... Else...
                    You have learned to repeat a block of lines of code after a `{repeat}` command.
                    Now you can also use indentation to make blocks after a {if} or {else} command.
                    Check out the example code.

                    ### Exercise
                    Add an {else} command to the example code. Make a block of line using indentation. You do this by starting each line with 4 spaces.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name {is} Hedy
                        {print} 'Welcome Hedy'
                        {print} 'You can play on your computer!'
                    ```
            9:
                story_text: |
                    In this level you can also put an {if} command inside another {if} command.
                example_code: |
                    ```
                    continue = {ask} 'Do you want to continue?'
                    {if} continue = yes
                        sure = {ask} 'Are you sure?'
                        {if} sure {is} yes
                            {print} 'We will continue'
                        {else}
                            {print} 'You are not sure'
                    {else}
                        {print} 'You do not want to continue'
                    ```
    in_command:
        name: '{in}'
        default_save_name: comando_em
        description: Introduzindo o comando {in}
        levels:
            5:
                story_text: |
                    ## Lists
                    When we want to check if something is in a list, we can now use the `{in}` command.
                    This code prints pretty! if you choose green or yellow, and meh otherwise.
                example_code: |
                    ```
                    pretty_colors {is} green, yellow
                    favorite_color {is} {ask} 'What is your favorite color?'
                    {if} favorite_color {in} pretty_colors {print} 'pretty!'
                    {else} {print} 'meh'
                    ```
                story_text_2: |
                    ### Exercise
                    Finish the example code by filling in the blanks with commands that you've learned.
                    When you've finished the code, try to create a code of your own and use a question that you've thought of yourself.
                example_code_2: |
                    ```
                    animals is dog, cow, sheep
                    answer is ask 'What is your favorite animal?'
                    _ answer _ animals _ 'Mine too!'
                    _ _ 'My favorite animals are dogs, cows and sheep'
                    ```
    is_command:
        name: '{is}'
        default_save_name: comando_√©
        description: introduzindo o comando {is}
        levels:
            2:
                story_text: |
                    ## Variables
                    You can name a word with `{is}`. This is called a **variable**. In this example we made a variable called name and a variable called age. You can use the word name anywhere in your code and it will be replaced by Hedy, like this:
                example_code: |
                    ```
                    name {is} Hedy
                    age {is} 15
                    {print} name is age years old
                    ```
                story_text_2: |
                    ### Exercise
                    Time to make your own variables!
                    In the example code we made an example of the variable `favorite_animals`. In line 1 the variable is set, and in line 2 we haved used the variable in a print command.
                    Firstly, finish our example by filling in your favorite animal in the blanks. Then make at least 3 of these codes yourself. Pick a variable, and set the variable with the {is} command. Then use it with a {print} command, just like we did.
                example_code_2: |
                    ```
                    favorite_animals is _
                    {print} I like favorite_animals
                    ```
            6:
                story_text: |
                    We also make a change in storing a word in a variable! You may now use `=` instead of  `{is}` when we store a name or a number in a variable, like this:
                example_code: |
                    ```
                    name = Hedy
                    answer = 20 + 4
                    ```
            14:
                story_text: |
                    We are going to learn more new items. You might know them already from mathematics, the `<` and `>`.
                    The `<` checks if the first number is smaller than the second, for example age `<` 12 checks if age is smaller than 12.
                    If you want to check if the first number is smaller or equal to the second, you can use `<=`, for example age `<=` 11.
                    The `>` checks if the first number is bigger than the second, for example points `>` 10 checks if points is larger than 10.
                    If you want to check if the first number is bigger or equal to the second, you can use `>=`, for example points `>=` 11.
                    You use these comparisons in an `{if}`, like this:
                example_code: |
                    ```
                    age = {ask} 'How old are you?'
                    {if} age > 12
                        {print} 'You are older than I am!'
                    ```
                story_text_2: |
                    From this level on, if you want to compare exactly, you can use two equal signs. This is what most programming languages do:
                example_code_2: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name == 'Hedy'
                        {print} 'You are cool!'
                    ```
                story_text_3: |
                    You can also compare if something is *not* equal to something else using `!=` like this:
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name != 'Hedy'
                        {print} 'You are not Hedy'
                    ```

                    {if} age < 13
                        {print} 'You are younger than me!'
                    {else}
                        {print} 'You are older than me!'
    language:
        name: L√≠ngua
        default_save_name: Idioma
        description: Pratique palavras em um idioma estrangeiro
        levels:
            5:
                story_text: |
                    Make your own program to practice your vocabulary in a new language.
                example_code: |
                    ```
                    {print} 'Learn French!'
                    cat {is} {ask} 'üê±'
                    {if} cat {is} chat {print} 'Terrific!'
                    {else} {print} 'No, cat is chat'
                    frog {is} {ask} 'üê∏'
                    {if} frog {is} grenouille {print} 'Super!'
                    {else} {print} 'No, frog is grenouille'
                    ```
            16:
                story_text: |
                    ### Exercise
                    Take a look at the example code. This is a program to practise French vocabulary. Now make your own program to practice your vocabulary in a new language.
                    If you don't know any other languages, you can use Google translate or you can use emojis and your native language.
                example_code: |
                    ```
                    french_words = ['bonjour', 'ordinateur', 'pomme de terre']
                    translation = ['hello', 'computer', 'potato']
                    score = 0
                    {for} i {in} {range} 1 {to} 3
                        answer = {ask} 'What does ' french_words[i] ' mean?'
                        correct = translation[i]
                        {if} answer == correct
                            {print} 'Correct!'
                            score = score + 1
                        {else}
                            {print} 'Wrong, ' french_words[i] ' means ' translation[i]
                    {print} 'You gave ' score ' correct answers.'
                    ```
    maths:
        name: maths
        default_save_name: maths
        description: Introducing maths
        levels:
            6:
                story_text: |
                    In this level you learn something new: you can now also calculate.

                    The plus is easy, you write it like with math: `5 + 5` for example. The minus also works fine, it is `5 - 5`.

                    The times is a bit different, because there is no times symbol on your keyboard. Just search, there really isn't!
                    That is why we multiply with the asterisk above 8: `5 * 5`. Read that as "5 times 5" that helps you remember it best.
                example_code: |
                    ```
                    {print} '5 plus 5 is ' 5 + 5
                    {print} '5 minus 5 is ' 5 - 5
                    {print} '5 times 5 is ' 5 * 5
                    ```
            12:
                story_text: |-
                    **Decimal numbers**
                    So far, Hedy did not allow for decimal numbers like 1.5, but now we do allow that. Note that computers use the `.` for decimal numbers.
                example_code: |
                    ```
                    {print} 'Two and a half plus two and a half is...'
                    {print} 2.5 + 2.5
                    ```
                story_text_2: |-
                    **Maths with words**
                    In this level you can also do addition with words like this:
                example_code_2: |
                    ```
                    a = 'Ol√° '
                    b = 'mundo!'
                    {print} a + b
                    ```
    music:
        name: m√∫sica
        default_save_name: m√∫sica
        description: Toque uma m√∫sica!
        levels:
            1:
                story_text: |-
                    Neste n√≠vel, voc√™ ir√° aprender a usar o comando `{play}` para tocar uma melodia!

                    Digite `{play}` seguido da nota que voc√™ quer tocar. A escala vai assim: C-D-E-F-G-A-B (no lugar de D√≥, R√©, Mi, F√°, Sol, L√°, Si; nessa ordem)
                    Como pode ver, h√° 7 letras diferentes, mas podemos tocar mais do que apenas 7 notas.
                    Digite um n√∫mero entre 1 e 10 depois da letra para escolher a escala. Por exemplo, depois de B4 vem C5.
                    C1 √© a nota mais grave que voc√™ pode tocar, e C10, a mais aguda.

                    ### Exerc√≠cio
                    Experimente o c√≥digo exemplo e ent√£o brinque com ele! Voc√™ consegue criar sua pr√≥pria melodia?
                    No pr√≥ximo n√≠vel, voc√™ aprender√° a tocar algumas m√∫sicas j√° existentes.
                example_code: |-
                    ```
                    {play} C4
                    {play} D4
                    {play} E4
                    {play} F4
                    {play} G4
                    {play} A4
                    {play} B4
                    {play} C5
                    ```
            2:
                story_text: |
                    ### Exercise
                    Termine as can√ß√µes! N√≥s come√ßamos os c√≥digos para algumas melodias.
                example_code: |
                    ```
                    {print} O Velho MacDonald tinha uma fazenda
                    {play} C5
                    {play} C5
                    {play} C5
                    {play} G4
                    {play} A4
                    {play} A4
                    {play} G4
                    ```
                story_text_2: Como pode ver, voc√™ tamb√©m pode usar o comando `{sleep}` para dar uma pequena pausa na m√∫sica.
                example_code_2: |
                    ```
                    {print} Brilha Brilha Estrelinha
                    {play} C
                    {play} C
                    {play} G
                    {play} G
                    {play} A
                    {play} A
                    {play} G
                    {sleep} 1
                    {play} F
                    {play} F
                    ```
            3:
                story_text: |
                    Crie uma melodia aleat√≥ria!

                    ### Exerc√≠cio
                    O c√≥digo exemplo cria uma melodia aleat√≥ria, mas ela √© bem curta e n√£o usa muitas notas.
                    Adicione mais notas √† lista e crie uma meloda mais longa copiando a √∫ltima linha mais algumas vezes.
                example_code: |
                    ```
                    notas {is} A4, B4, C4
                    {play} notas {at} {random}
                    {play} notas {at} {random}
                    {play} notas {at} {random}
                    ```
            4:
                story_text: |
                    Use the `{clear}` command to create a karaoke machine!

                    ### Exercise
                    Finish the karaoke version of 'Mary had a little lamb'.
                    Then, create a karaoke version of any song you'd like!
                example_code: |
                    ```
                    {print} 'Mary had a little lamb'
                    {play} E
                    {play} D
                    {play} C
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Little lamb, little lamb'
                    {play} D
                    {play} D
                    {play} D
                    {play} E
                    {play} E
                    {play} E
                    {clear}
                    {print} 'Mary had a little lamb'
                    {play} E
                    ```
            5:
                story_text: |
                    You don't always have to use the `{play}` command to play a whole song, sometimes you just want to play one note.
                    For example, if you want to make a quiz, you can play a happy high note if the answer is right and a sad low note if the answer is wrong.

                    ### Exercise
                    Finish the first question by adding a line of code that plays a C3 note if the wrong answer is given.
                    Then think of 3 more questions to add to this quiz.
                example_code: |
                    ```
                    resposta {is} {ask} 'Qual √© a capital do Zimb√°bue?'
                    {if} resposta {is} Harare {play} C6
                    _
                    ```
            6:
                story_text: "Instead of playing notes, you can also play numbers now. Simply type `{play} 1` for the lowest note, `{play} 70` for the highest note, or anything in between.\n\n### Exercise\n This calls for musical maths! Try out the example code a couple of times with different starting\
                    \ numbers. \nThen, see if you can compose a song using the numbers.\n"
                example_code: |
                    ```
                    number = {ask} 'Say a starting number between 1 and 67'
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    number = number + 1
                    {print} number
                    {play} number
                    ```
            7:
                story_text: |
                    Using the `{repeat}` command can make your codes for melodies a lot shorter!

                    ### Exercise
                    Finish the code for Twinkle Twinkle Little Star by using the `{repeat}`command.
                    Then go back to the songs you've made in the previous levels. Can you shorten those codes too?
                example_code: |
                    ```
                    {print} 'Brilha Brilha Estrelinha'
                    {repeat} 2 {times} {play} C4
                    {repeat} 2 {times} {play} G4
                    _
                    ```
            8:
                story_text: |
                    Now that we can use the `{repeat}` command for multiple lines, we can make songs even more easily!

                    ### Exercise
                    Finish the song of Brother John (Fr√®re Jacques). Don't forget to use `{repeat}`!
                example_code: |
                    ```
                    {print} 'Brother John'
                    {repeat} 2 {times}
                        {play} C
                        {play} D
                        {play} E
                        {play} C
                    {repeat} 2 {times}
                        {play} E
                        {play} F
                        {play} G
                        {sleep} 1
                    ```
            9:
                story_text: |
                    From this level on you can - among other things - use a {repeat} command inside a {repeat} command.
                    That makes songs like 'Happy birthday' even shorter!

                    ### Exercise
                    Finish the song!
                example_code: |
                    ```
                    first_time = yes
                    {repeat} 2 {times}
                        {repeat} 2 {times}
                            {play} C
                        {play} D
                        {play} C
                        {if} first_time {is} yes
                            {play} F
                            {play} E
                            first_time {is} no
                        {else}
                            _
                    ```
            12:
                story_text: |
                    Use functions in you songs! As you can see in the example code, you can make a function for each line of Twinkle Twinkle little star. Once you've programmed the first three lines, all you have to do is call the functions in the order you want them played in.

                    ### Exercise
                    Finish the song of Twinkle Twinkle little star.
                    Then look back at all the songs you've programmed in the levels before, can you make those codes better and shorter using functions too?
                example_code: |
                    ```
                    {define} first_line
                        {play} C
                        {play} C
                        {play} G
                        {play} G
                        {play} A
                        {play} A
                        {play} G
                        {sleep}

                    {define} second_line
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {play} D
                        {play} C
                        {sleep}

                    {define} third_line
                        {play} G
                        {play} G
                        {play} F
                        {play} F
                        {play} E
                        {play} E
                        {play} D
                        {sleep}

                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    {call} _
                    ```
            13:
                story_text: |
                    You can use a function with an argument for songs that have line taht are almost the same, but slightly different each time.
                    One example is the song 'Yankee Doodle'. The first 4 notes of the first lines are the same, buyt each time they are followed by a different couple of notes.

                    ### Exercise
                    Can you finish the song of Yankee Doodle?
                    Can you think of another song to programm this way?
                example_code: |
                    ```
                    {print} 'Yankee Doodle'
                    {define} _ {with} note_1, note_2, note_3
                        {play} C4
                        {play} C4
                        {play} D4
                        {play} E4
                        {play} _
                        {play} _
                        {play} _

                    {call} line_1 {with} 29, 31, 30
                    {call} line_1 {with} 29, 28, 0
                    {call} line_1 {with} 32, 31, 30

                    {play} C4
                    {play} B3
                    {play} G3
                    {play} A3
                    {play} B3
                    {play} C4
                    {play} C4
                    ```
            14:
                story_text: |
                    You can programm music for fun, but you can also use the musical notes to make something useful like a fire alarm!

                    ### Exercise
                    Make sure the fire alarm rings when there is a fire!
                example_code: |
                    ```
                    {define} fire_alarm
                        {print} 'FIRE!'
                        note = 40
                        {for} i {in} {range} 1 {to} 100
                            {if} note _ 50
                                note = note + 5
                                {play} _
                            {else}
                                note = 40

                    fire = {ask} 'Is there a fire?'
                    {if} fire _ 'yes'
                        {call} fire_alarm
                    ```
    parrot:
        name: Papagaio
        default_save_name: Papagaio
        description: Crie seu pr√≥prio papagaio de estima√ß√£o online que ir√° copiar voc√™!
        levels:
            1:
                story_text: |
                    Crie seu pr√≥prio papagaio de estima√ß√£o online que ir√° copiar voc√™!
                example_code: |
                    ```
                    {print} Sou Hedy, a papagaia
                    {ask} qual √© o seu nome?
                    {echo}
                    {echo}
                    ```
                story_text_2: |
                    ### Exerc√≠cio
                    Copie o c√≥digo exemplo √† sua tela de entrada clicando no bot√£o amarelo.
                    Fa√ßa o papagaio perguntar outra coisa. Preencha as lacunas no exemplo!
                    **Extra** Voc√™ tamb√©m pode deixar o papagaio fazer m√∫ltiplas perguntas. Escreva mais algumas linhas de c√≥digo embaixo de seu programa.
                example_code_2: |
                    ```
                    {print} Sou Hedy, a papagaia
                    {ask} _
                    {echo}
                    {echo}
            2:
                story_text: |
                    Crie seu pr√≥prio papagaio de estima√ß√£o online que ir√° copiar voc√™!
                example_code: |
                    ```
                    {print} Sou Hedy, a papagaia
                    nome _ _ qual √© o seu nome?
                    {print} nome
                    _
                    {print} crr√°c
                    _
                    {print} nome
                    ```
                story_text_2: |
                    ### Exercise
                    You can use variables to make the parrot say more than only your name. Can you complete this code?
            3:
                story_text: |
                    Ensine ao seu papagaio uma nova palavra com `{add}`.
                    ### Exerc√≠cio
                    Voc√™ consegue adicionar o comando `{add} {to_list}` de modo a fazer o c√≥digo funcionar?
                example_code: |
                    ```
                    palavras {is} crr√°c, Hedy
                    {print} Treine sua papagaia!
                    nova_palavra {is} {ask} Qual palavra voc√™ quer ensinar a ela?
                    _ nova_palavra _ palavras
                    {print} üßí Diga nova_palavra, Hedy!
                    {print} ü¶ú palavras {at} {random}
                    ```
            4:
                story_text: |
                    In this level we have to use quotation marks with the commands `{ask}` and `{print}`.
                    Can you complete the code by adding quotation marks?
                example_code: |
                    ```
                    words {is} squawk, Hedy
                    {print} _ Train your parrot! _
                    new_word {is} {ask} _ Which word do you want to teach them? _
                    {add} new_word {to_list} words
                    {print} _ üßí Say _ new_word _, Hedy!_
                    {print} _ ü¶ú _ words {at} {random}
                    ```
            5:
                story_text: |
                    Recompense seu papagaio se ele disser a palavra correta!
                example_code: |
                    ```
                    palavras {is} grasnar, Hedy
                    {print} 'Treine seu papagaio!'
                    nova_palavra {is} {ask} 'Qual palavra voc√™ quer ensinar a ele?'
                    {add} nova_palavra {to_list} palavras
                    palavra_dita {is} palavras {at} {random}
                    {print} 'üßí Diga ' nova_palavra ', Hedy!'
                    {print} 'ü¶ú' palavra_dita
                    {if} palavra_dita {is} nova_palavra {print} 'üßí √ìtimo trabalho, Hedy! üç™'
                    {else} {print} 'üßí N√£o, Hedy! Diga ' nova_palavra
                    ```
    piggybank:
        name: Piggy Bank
        default_save_name: Piggy Bank
        description: Count your pocketmoney!
        levels:
            12:
                story_text: |
                    In this adventure you learn how to make a digital piggy bank, to calculate how much money you have and how long you need to save up to buy what you want!
                example_code: |
                    ```
                    {print} 'The digital piggy bank'
                    wish = {ask} 'What would you like to buy?'
                    price = {ask} 'How much does that cost?'
                    saved = {ask} 'How much money have you saved already?'
                    allowance = {ask} 'How much pocket money do you get per week?'
                    to_save = price - saved
                    weeks = to_save / allowance
                    {print} 'You can buy a ' _ ' in ' _ ' weeks.'
                    ```
            14:
                story_text: |
                    ### Exercise
                    In this level you can let Hedy tell you if you have saved up enough money!
                    Finish this code by filling in the blanks!
                example_code: |
                    ```
                    _ calculate_budget with wish, money, allowance
                        to_save = wish - money
                        weeks = to_save / allowance
                        {if} wish _ money
                            {print} 'You need to save up some more!'
                            {print} 'Youll need ' weeks ' more weeks.'
                        {else}
                            {print} 'Great! You have enough'
                            {print} 'Lets go shopping!'

                    money = {ask} 'How much money have you saved?'
                    wish = {ask} 'How much money do you need?'
                    allowance = {ask} 'How much pocket money do you get each week?'

                    {call} calculate_budget with _, _, _
                    ```
    pressit:
        name: Key presses
        default_save_name: Pressed
        description: Try linking a keyboard key to a command!
        levels:
            5:
                story_text: |
                    In this level there is another new keyword: `{pressed}`!
                    With `{pressed}` you can use keys on your keyboard to control what lines are used.

                    ### Exercise
                    Look at the example and add one more line of code that reacts to a key press.
                example_code: |
                    ```
                    {print} 'Do you want a good (g) or bad (b) ending?'
                    {if} g {is} {pressed} {print} 'They lived happily ever after ‚ù§'
                    {else} {print} 'The prince was eaten by a hippopotamus üò≠'
                    ```
                story_text_2: |
                    You can also link turtle commands to keys.

                    ### Exercise
                    Copy the lines a few times so you can create a larger drawing.
                example_code_2: |
                    ```
                    {if} y {is} {pressed} {forward} 15
                    {else} {turn} 90
                    ```
            7:
                story_text: |
                    Now that you have learned about `{repeat}`, we can press keys multiple times.
                    You can use it to make the turtle walk forward and turn.

                    ### Exercise
                    The code you have seen in level 5 only checks the key once. Copy the example code and add a `{repeat}` to it, so that you can press the keys many times.
                    Use this code to draw something nice.
                example_code: |
                    ```
                    {if} x {is} {pressed} {forward} 15 {else} {turn} 90
                    ```
            9:
                story_text: |
                    Now that you know how to combine statements, you can create a touch type tool with `{pressed}`.

                    ### Exercise
                    Finish the code. Each time a random letter should be chosen, which you have to press. You get a point for a correct press, and and two points deduction for a wrong press.
                    **(extra)** Clear the screen after each letter, and show the user how many points they have scored.
                example_code: |
                    ```
                    points = 0
                    letters = a, b, c, d, e
                    {repeat} 10 {times}
                        letter = _ _ _
                        {print} 'Press the letter ' letter
                        {if} letter {is} {pressed}
                        _
                        _
                        _
                    ```
    print_command:
        name: '{print}'
        default_save_name: imprima
        description: Introduction print command
        levels:
            1:
                story_text: |
                    ## The print command
                    You can print text to the screen using the `{print}` command.
                example_code: |
                    ```
                    {print} Ol√°, programador(a)!
                    {print} Bem-vindo(a) √† Hedy!
                    ```
                story_text_2: |
                    ### Exercise
                    In Hedy you will find exercises in every adventure. An exercise allows you to practise the new commands and concepts, and lets you give your own twist to the example codes.
                    In this exercise you will see a pink blank space. You have to fill something in the place of the blank space before the code can be run.

                    Fill in the `{print}` command in the blank space and then add five more lines of code. Each line has to start with a `{print}` command.
                    Have fun!
                example_code_2: |
                    ```
                    _ Hello!
                    ```
            18:
                story_text: |-
                    We arrived at real Python code! That means we need to use parentheses with `{print}` and `{range}` from now on.
                    It also means you can use Hedy code from this level in any Python environment as long as you use the English commands. If you haven't until now, you can switch the toggle in the commands menu to do so.
                example_code: |
                    ```
                    {print}('Hello!')
                    {for} i {in} {range}(1, 10):
                        {print}('This is line ', i)
                    ```
                story_text_2: If you want to print more than one item, you need to separate them by commas.
                example_code_2: |
                    ```
                    temperature = 25
                    {print}('It is ', temperature, ' degrees outside')
                    ```

                    {print}('My name is ', name)
    quizmaster:
        name: Quizmaster
        default_save_name: Quizmaster
        description: Make your own quiz!
        levels:
            14:
                story_text: |
                    ### Exercise
                    In this adventure you can make your own quiz! Fill in the blanks, add more questions and enjoy your own quiz!
                    You can make a quiz about anything you like: your hobby, your favorite animal, your favorite book or anything at all!
                example_code: |
                    ```
                    {print} 'Make your own quiz'
                    points_a = 0
                    points_b = 0
                    {print} 'Question'
                    {print} 'Answer option A'
                    {print} 'Answer option B'
                    answer = {ask} 'Which answer?'
                    {if} answer == 'A'
                        points_a = points_a + 1
                    {if} answer == 'B'
                        points_b = points_b + 1
                    {print} 'End of the quiz!'
                    {print} 'Lets see the results!'
                    {if} points_a > points_b
                        {print} 'You belong to the A club'
                    {if} points_b > points_a
                        {print} 'You belong to the B club'
                    ```
    quotation_marks:
        name: '''quotation marks'''
        default_save_name: quotation_marks
        description: Introdu√ß√£o √†s aspas
        levels:
            4:
                story_text: |
                    ## 'Quotation marks'
                    In level 4 `{ask}` and `{print}` have changed.
                    You must put text that you want to print between quotation marks.
                    This is useful, because now you can print all the words you want. Also the words you used to store something with `{is}`.
                    Most programming languages also use quotation marks when printing, so we are also getting a step closer to real programming!
                example_code: |
                    ```
                    {print} 'You need to use quotation marks from now on!'
                    answer {is} {ask} 'What do we need to use from now on?'
                    {print} 'We need to use ' answer
                    ```
                story_text_2: |
                    ## Contractions
                    Important! Mind that now that we're using quotation marks, Hedy will get confused when you use the apostrophe for contractions like I'm or What's.
                    Make sure to remove those apostrophes and change the spelling to I am or What is.
                    Check out the example code to see the wrong way of using apostrophes.
                example_code_2: |
                    ```
                    _ This is the wrong way of using apostrophes _
                    {print} 'I'm babysitting my sister's kids'
                    {print} 'What's more fun than that?'
                    ```
            12:
                story_text: |
                    **All texts need to be in quotation marks**
                    For this level on you will also have to use quotation marks when storing a text with `=`:
                example_code: |
                    ```
                    name = 'Hedy the Robot'
                    {print} 'Hello ' name
                    ```
                story_text_2: |
                    **All items in lists need quotation marks too**
                    Lists are texts, so they need quotation marks too. Mind that each single item on the list has quotation marks.
                    This allows you to save two words as 1 item on the list, for example 'Iron Man'.
                example_code_2: |
                    ```
                    superheroes = 'Spiderman', 'Batman', 'Iron Man'
                    {print} superheroes {at} {random}
                    ```
                story_text_3: |
                    **All text after `{if}` comparisons need quotation marks too**
                example_code_3: |
                    ```
                    name = {ask} 'What is your name?'
                    {if} name = 'Hedy the Robot'
                        {print} 'Hi there!'
                    ```
                story_text_4: |
                    **Numbers don't need quotation marks**
                    For numbers, you do not use quotation marks in the `=`:
                example_code_4: |
                    ```
                    score = 25
                    {print} 'You got ' score
                    ```
    random_command:
        name: '{random}'
        default_save_name: random_command
        description: introducing at random command
        levels:
            3:
                story_text: |
                    ## At random
                    In this level you can make a list using the `{is}` command. You can let the computer choose a random item from that list. You do that with `{at} {random}`.
                example_code: |
                    ```
                    animals {is} dogs, cats, kangaroos
                    {print} animals {at} {random}
                    ```
                story_text_2: |
                    You can use the `{at} {random}` command in a sentence as well.
                example_code_2: |
                    ```
                    food {is} sandwich, slice of pizza, salad, burrito
                    {print} I am going to have a food {at} {random} for lunch.
                    ```
                story_text_3: |
                    ### Exercise
                    Try out the `{at} {random}` command by making your own gameshow (like the ones on tv) where you choose a door or suitcase and it contains a big price!
                    Can you do it? We have already put the first lines into the example code.
                example_code_3: |
                    ```
                    {print} The big gameshow!
                    {print} There are 3 suitcases in front of you...
                    chosen {is} {ask} Which suitcase do you choose?
                    prices {is} _
                    _
                    ```
            16:
                story_text: |-
                    We are going to make lists the Python way, with square brackets around the lists! We also keep the quotation marks around each item like we have learned in previous levels.
                    We use square brackets to point out a place in a list. For example: `friends[1]` is the first name on the list of friends, as you can see in the first part of the example code. The second part of the example code shows you that we can also match 2 lists using the variable i.
                example_code: |
                    ```
                    friends = ['Ahmed', 'Ben', 'Cayden']
                    {print} friends[1] ' is the first friend on the list.'
                    {print} friends[2] ' is the second friend on the list.'
                    {print} friends[3] ' is the third friend on the list.'
                    #now we will match 2 lists using the variable i
                    lucky_numbers = [15, 18, 6]
                    {for} i {in} {range} 1 {to} 3
                        {print} friends[i] 's lucky number is ' lucky_numbers[i]
                    ```
                story_text_2: |-
                    Now that you've learned to use the brackets in lists, you can also start using the {at} {random} command in the Python way!
                    You simply type the name of your list with `[random]` behind it!
                example_code_2: |-
                    ```
                    fruit = ['apple', 'banana', 'cherry']
                    {print} fruit[random]
                    ```
    repeat_command:
        name: '{repeat}'
        default_save_name: repeat_command
        description: comando {repeat}
        levels:
            7:
                story_text: |
                    ## Repeat! Repeat! Repeat!
                    Level 7 adds the `{repeat}` command.  `{repeat}` can be used to execute one line of code multiple times. Like this:

                    ### Exercise
                    Play around with the repeat command. Can you make the happy birthday song in only 3 lines of code instead of 4 now?
                example_code: |
                    ```
                    {repeat} 3 {times} {print} 'Hedy is fun!'
                    ```
            8:
                story_text: |
                    ### Repeat commands and indentation
                    In this level you can repeat multiple lines of code with only 1 repeat command.
                    You do this by making a block of lines that you want to repeat.
                    The lines in this block will need **indentation** .
                    That means putting four spaces at the beginning of each line. You will also have to indent when you just want to create a block of one line.
                example_code: |
                    ```
                    {repeat} 5 {times}
                        {print} 'Hello everyone'
                        {print} 'This is all repeated 5 times'
                    ```
            9:
                story_text: |
                    In this level you can not only use multiple lines with `{if}` and `{repeat}`, but you can also put them together!
                    In the example you see an `{if}` command within a `{repeat}` command. It is also allowed the other way around, and an `{if}` is also allowed in an `{if}` and a `{repeat}` in a `{repeat}`.
                    Give it a try!
                example_code: |
                    ```
                    {repeat} 3 {times}
                        food = {ask} 'What do you want?'
                        {if} food {is} pizza
                            {print} 'nice!'
                        {else}
                            {print} 'pizza is better'
                    ```
    repeat_command_2:
        name: '{repeat} 2'
        default_save_name: repeat_command_2
        description: comando {repeat} 2
        levels:
            7:
                story_text: |
                    ## Repeat with other commands and with variables
                    You have practiced the `{repeat}` command in combination with the `{print}` command now, but did you know you could also use other commands with `{repeat}` ?
                    In this example code you can see that `{repeat}` can also be used with an `{ask}`, `{if}` or `{else}` command.
                example_code: |
                    ```
                    {repeat} 2 {times} answer = {ask} 'Did you know you could ask a question multiple times?'
                    {if} answer {is} yes {repeat} 2 {times} {print} 'You knew that already!'
                    {else} {repeat} 3 {times} {print} 'You have learned something new!'
                    ```
                story_text_2: |
                    Another interesting thing you can so with the `{repeat}` command is using variables to set the amount of times something should be repeated. In the example code you can see that we first ask the person how old they are.
                    Then, in line 3, the question is repeated 'age' times. So we have used the variable 'age' with the `{repeat}` command.
                example_code_2: |
                    ```
                    {print} 'Yay! It is your birthday!'
                    age = {ask} 'How old are you now?'
                    {repeat} age {times} {print} 'Hip Hip Hurray!'
                    ```
            8:
                story_text: |
                    ### In the block or not?
                    In this level you have to think carefully which lines of code should be in the block and which shouldn't.
                    For example: If you want to sing the song *the muffin man*. You only want the line with 'the muffin man' to be repeated twice.
                    This means the last line shouldn't start with indentation as it doesn't belong to the block.
                    If you do start the last line with indentation the song will turn out wrong.

                    ### Exercise
                    Each line in the example code starts with a blank. Remove the blanks and try to figure out which line need indentation and which don't to make the muffin man song.
                example_code: |
                    ```
                    _ {print} 'Do you know the muffin man?'
                    _ {repeat} 2 {times}
                    _ {print} 'The muffin man'
                    _ {print} 'Do you know the muffin man, who lives on Drury Lane?'
                    ```
    restaurant:
        name: Restaurant
        default_save_name: Restaurante
        description: Crie seu pr√≥prio restaurante virtual
        levels:
            1:
                story_text: |
                    No n√≠vel 1 voc√™ pode fazer seu pr√≥prio restaurante virtual e receber os pedidos de seus convidados.
                story_text_2: |
                    Voc√™ consegue pensar em mais linhas para adicionar ao c√≥digo do seu restaurante? Por exemplo, voc√™ pode usar {ask} para perguntar aos convidados o que eles gostariam de beber, dizer o pre√ßo ou desejar uma refei√ß√£o agrad√°vel?
                example_code_2: |
                    ```
                    {print} Bem-vindo(a) ao restaurante da Hedy üçü
                    _ O que voc√™ gostaria de pedir?
                    {echo} Ent√£o voc√™ gostaria de pedir
                    {print} Obrigado pelo seu pedido!
                    {print} Est√° a caminho!
                    ```
            2:
                story_text: |
                    In level 2 you could expand your restaurant by using variables. In level 1 Hedy could only {echo} the order once and only remember the last thing that was ordered.
                    Now you can use variables and Hedy can remember both the food and the drinks!
                example_code: |
                    ```
                    {print} Bem-vindo(a) ao restaurante da Hedy!
                    {print} Hoje estamos servimos pizza ou lasanha.
                    comida {is} {ask} O que voc√™ gostaria de comer?
                    {print} √ìtima escolha! comida √© minha favorita!
                    cobertura {is} {ask} Gostaria dela com carne ou com vegetais?
                    {print} comida com cobertura a caminho!
                    ```
                story_text_2: |
                    ### Exercise
                    Can you make this code more elaborate? For example by adding drinks to the order? Or...?
            3:
                story_text: |
                    Having trouble to decide what you wanna have for dinner? You can let Hedy choose for you!
                    Simply add lists of your favorite (or least favorite) meals and Hedy can randomly choose your dinner.
                    You can also have a bit of fun, by letting Hedy choose the price for your dinner as well! What will you get?
                example_code: |
                    ```
                    dishes {is} spaghetti, brussels sprouts, hamburgers
                    {print} You will have dishes {at} {random} tonight!
                    prices {is} 1 euro, 10 euros, 100 euros
                    {print} That will be prices {at} {random} please.
                    ```
                story_text_2: |
                    Does your costumer have any allergies or do they dislike certain dishes? Then you can use the `{remove}`command to remove it from your menu.
                example_code_2: |
                    ```
                    {print} Bem-vindo(a) ao seu pr√≥prio restaurante aleat√≥rio!
                    entradas {is} _
                    pratos_principais {is} _
                    sobremesas {is} _
                    bebidas {is} _
                    pre√ßos {is} _
                    _
                    ```
            4:
                story_text: |
                    ### Exercise
                    Add the quotation marks to this code to make it work! Be careful: variables should not be in quotation marks.
                    Then, use the `{clear}` command to only show one line at a time in your output screen.

                    ### Exercise 2
                    Go back to the previous level and copy your restaurant code. Make the code work in this level by adding quotation marks in the right spots and add some `{clear}` commands.
                example_code: |
                    ```
                    _ Add the quotation marks to this code _
                    {print} Welcome to Restaurant Chez Hedy!
                    {print} Today we are serving pizza or lasagna.
                    food {is} {ask} What would you like to eat?
                    {print} Great choice! The  food  is my favorite!
                    topping {is} {ask} Would you like meat or veggies on that?
                    {print} food  with  topping  is on its way!
                    drinks {is} {ask} What would you like to drink with that?
                    {print} Thank you for your order.
                    {print} Your  food  and  drinks  will be right there!
                    ```
            5:
                story_text: |
                    In this level the {if} command allows you to {ask} your customers questions and give different responses to the answers.
                    In the example below, you see that you can {ask} the customer {if} they want to hear the specials and Hedy can respond accordingly.
                example_code: |
                    ```
                    drinks_in_stock {is} water, lemonade, cola, orange juice
                    drink {is} {ask} 'What would you like to drink?'
                    {if} drink {in} drinks_in_stock {print} 'One ' drink 'coming up!'
                    {else} {print} 'Sorry, we do not sell that'
                    ```
            6:
                story_text: |
                    In this level you can use maths to calculate the total price of your customer's order, which can make your virtual restaurant more realistic.
                example_code: |
                    You can make a simple restaurant code, like this:
                    ```
                    {print} 'Welcome to Hedys restaurant'
                    {print} 'Here is our menu:'
                    {print} 'Our main courses are pizza, lasagne, or spaghetti'
                    main = {ask} 'Which main course would you like?'
                    price = 0
                    {if} main {is} pizza price = 10
                    {if} main {is} lasagne price = 12
                    {if} main {is} spaghetti price = 8
                    {print} 'You have ordered ' main
                    {print} 'That will be ' price ' dollars, please'
                    {print} 'Thank you, enjoy your meal!'
                    ```
            7:
                story_text: |
                    In this level you've learned how to use the {repeat} command to repeat a line of code a certain amount of times.
                    You can use that in your restaurant to {ask} multiple people what they'd like to eat. Like this:

                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
                example_code: |
                    ```
                    {print} 'Welcome to Hedys restaurant!'
                    people = {ask} 'How many people are joining us today?'
                    {repeat} people times food = {ask} 'What would you like to eat?'
                    {print} 'Thanks for your order! Its coming right up!'
                    ```
            8:
                story_text: |
                    In this level you can make your virtual restaurant more elaborate by repeating multiple lines of code. Like this:

                    ### Exercise
                    This code can be expanded with more items on the menu, for example offering drinks, and/or multiple courses or desserts. Add at least one more item.
                    **Extra** Add even more items, as many options as you like!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Chez Hedy!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    {repeat} people {times}
                        food = {ask} 'What would you like to order?'
                        {print} food
                    {print} 'Thank you for ordering!'
                    {print} 'Enjoy your meal!'
                    ```
            9:
                story_text: |
                    In this level you can use nesting to make your restaurant more realistic and more fun!
                    For example you would {ask} for sauce {if} somebody orders fries, but you wouldn't {if} someone orders pizza!
                    Check out the example, and try this at your own virtual restaurant!
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Chez Hedy!'
                    people = {ask} 'How many people will be joining us today?'
                    {print} 'Great!'
                    price = 0
                    {repeat} people {times}
                    _ food = {ask} 'What would you like to order?'
                    _ {print} food
                    _ {if} food {is} fries
                    _ price = price + 3
                    _ sauce = {ask} 'What kind of sauce would you like with your fries?'
                    _ {if} sauce {is} no
                    _ {print} 'no sauce'
                    _ {else}
                    _ price = price + 1
                    _ {print} 'with ' sauce
                    _ {if} food {is} pizza
                    _ price = price + 4
                    {print} 'That will be ' price ' dollar'
                    {print} 'Enjoy your meal!'
                    ```
            10:
                story_text: |
                    In this level you'll learn how to easily {ask} your guests' orders in a short code.
                example_code: "```\ncourses = appetizer, main course, dessert\n{for} course {in} courses\n    {print} 'What is your order for ' course '?'\n    _ \n    _\n```\n"
                story_text_2: |
                    ### Exercise
                    Of course, you could also order for multiple people!
                    Can you add the correct amount of indentation before each line to make the code work properly?
                    Tip: some lines don't need any indentation at all.
                example_code_2: |
                    ```
                    courses = appetizer, main course, dessert
                    names = Timon, Onno
                    {for} name {in} names
                        {for} course {in} courses
                            food = {ask} name ', what would you like to eat as your ' course '?'
                            {print} name ' orders ' food ' as their ' course
                    ```
            11:
                story_text: |
                    We can use the `{for} i {in} {range} 1 {to} 5` to {print} the orders from multiple customers in an orderly manner.
                example_code: |
                    ```
                    {print} 'Welcome to Restaurant Hedy!'
                    people = {ask} 'For how many people would you like to order?'
                    {print} 'So you want to order for ' people ' people.'
                    {print} "Let's go!"
                    ```
            12:
                story_text: |
                    From this level on you can use decimal numbers to make you menu more realistic.
                example_code: |
                    ```
                    price = 0.0
                    food = {ask} 'What would you like to order?'
                    drink = {ask} 'What would you like to drink?'
                    {if} food {is} 'hamburger'
                        price = price + 6.50
                    {if} food {is} 'pizza'
                        price = price + 5.75
                    {if} drink {is} 'water'
                        price = price + 1.20
                    {if} drink {is} 'soda'
                        price = price + 2.35
                    {print} 'That will be ' price ' dollar, please'
                    ```
            13:
                story_text: |
                    In this level we can use the new commands to upgrade our restaurant.
                    We use `{and}` to see {if} two things are both the case.
                example_code: |
                    ```
                    price = 10
                    food = {ask} 'What would you like to eat?'
                    drinks = {ask} 'What would you like to drink?'
                    {if} food {is} 'sandwich' {and} drinks {is} 'juice'
                        {print} 'Thats our discount menu'
                        price = price - 3
                    {print} 'That will be ' price ' dollars'
                    ```
            15:
                story_text: |
                    With the `{while}` you can make sure your costumers can keep adding orders until they are done.
                    ### Exercise
                    Correctly add the `{while}` command to this code.
                example_code: |
                    ```
                    {print} 'Welcome at McHedy'
                    more = 'yes'
                    _
                        order = {ask} 'What would you like to order?'
                        {print} order
                        more = {ask} 'Would you like to order anything else?'
                    {print} 'Thank you!'
                    ```
    rock:
        name: Pedra, papel, tesoura
        default_save_name: Pedra_2
        description: Fa√ßa seu pr√≥prio jogo de pedra, papel e tesoura
        levels:
            1:
                story_text: |
                    No n√≠vel 1 voc√™ pode come√ßar com um jogo de pedra, papel e tesoura.

                    Com `{ask}` voc√™ pode fazer uma escolha, e com `{echo}` voc√™ pode repetir essa escolha.
                example_code: |
                    ```
                    {print} o que voc√™ escolhe?
                    {ask} escolha entre pedra, papel ou tesoura
                    {echo} ent√£o sua escolha foi:
                    ```
                story_text_2: |
                    ### Exercise
                    Instead of using words, you could also use emojis: ‚úä‚úã‚úå
                    Can you create a code using emojis?
                example_code_2: |
                    ```
                    {print} o que voc√™ escolhe?
                    {ask} escolha entre _
                    {echo} ent√£o sua escolha foi:
                    ```
            2:
                story_text: |
                    In this level you can practise using the variables, so that you can make the rock, paper, scissors game in the next level!
                example_code: |-
                    ```
                    escolha {is} pedra
                    {print} Eu escolho _
                    ```
            3:
                story_text: |
                    Voc√™ pode usar o comando `{at} {random}` para deixar o computador escolher pedra, papel ou tesoura!

                    ### Exerc√≠cio
                    Termine o c√≥digo usando o comando `{at} {random}`.
                example_code: |
                    ```
                    escolhas {is} pedra, papel, tesoura
                    {print} escolhas _
                    ```
                story_text_2: |
                    **Extra** Fa√ßa um jogo para duas pessoas jogarem. Primeiro, pe√ßa que as duas digitem seus nomes. Ent√£o, deixe que o computador escolha aleatoriamente para elas.
                example_code_2: |
                    ```
                    escolhas {is} pedra, papel, tesoura
                    jogador_1 {is} {ask} Nome do(a) jogador(a) 1:
                    _
                    ```
            4:
                story_text: |
                    In this level we can further program rock, paper, scissors. But if you want to add text, you have to use quotation marks here too.
                    ### Exercise
                    Fill in quotation marks on the blanks. Mind that the variable `choices` should be outside the quotes.
                example_code: |
                    ```
                    choices {is} rock, paper, scissors
                    {print} _The computer chooses..._ choices {at} {random}
                    ```
            5:
                story_text: |
                    In this level we can determine who won.
                    For that you need the new `{if}` code.

                    Save your choice with the name of choice and the choice of computer as computer choice.
                    Then you can use `{if}` to see {if} they are the same or different.
                    Will you finish the code?
                example_code: |
                    ```
                    options {is} rock, paper, scissors
                    computer_choice {is} _
                    choice {is} _
                    {print} 'you chose ' _
                    {print} 'computer chose ' _
                    {if} _ {is} _ {print} 'tie!' {else} {print} 'no tie'
                    ```

                    Fill in the correct code on the blanks to see if it is a draw.
            9:
                story_text: |
                    In this level you can program the whole rock, paper, scissors game by nesting the {if}-commands. Can you finish the code?
                example_code: |
                    ```
                    choices = rock, paper, scissors
                    your_choice = {ask} 'What do you choose?'
                    {print} 'You choose ' your_choice
                    computer_choice = choices {at} {random}
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} rock
                        {if} your_choice {is} paper
                            {print} 'You win!'
                        {if} your_choice {is} scissors
                            {print} 'You lose!'
                    # finish this code
                    ```
            10:
                story_text: |
                    ### Exerc√≠cio
                    Nos n√≠veis anteriores, voc√™ fez diversas vezes o seu pr√≥prio jogo de pedra, papel e tesoura. Voc√™ consegue terminar este c√≥digo e usar o comando `{for}` para fazer o jogo funcionar corretamente?
                example_code: |
                    ```
                    escolhas = _
                    jogadores = _
                    {for} _
                    ```
            13:
                story_text: |
                    With the `{and}` command you can shorten your rock, paper, scissors code! Check out the example code below and try to finish it.
                example_code: |
                    ```
                    options = 'rock', 'paper', 'scissors'
                    your_choice = {ask} 'What do you choose?'
                    computer_choice = options {at} {random}
                    {print} 'You choose ' your_choice
                    {print} 'The computer chooses ' computer_choice
                    {if} computer_choice {is} your_choice
                        {print} 'Tie'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'paper'
                        {print} 'You win!'
                    {if} computer_choice {is} 'rock' {and} your_choice {is} 'scissors'
                        {print} 'The computer wins!'
                    _
                    ```
            15:
                story_text: |
                    ### Exercise
                    Play until you beat the computer! But first, finish the example code...
                example_code: |
                    ```
                    won = 'no'
                    options = 'rock', 'paper', 'scissors'
                    {while} won == 'no'
                        your_choice = {ask} 'What do you choose?'
                        computer_choice = options {at} {random}
                        {print} 'you chose ' your_choice
                        {print} 'the computer chose ' computer_choice
                        {if} computer_choice == your_choice
                            {print} 'Tie!'
                        {if} computer_choice == 'rock' {and} your_choice == 'scissors'
                            {print} 'You lose!'
                        {if} computer_choice == 'rock' {and} your_choice == 'paper'
                            {print} 'You win!'
                            won = 'yes'
                    _
                    ```
    rock_2:
        name: Pedra, papel e tesoura 2
        default_save_name: pedra_2
        description: Parte 2 de pedra, papel e tesoura
        levels:
            2:
                story_text: |
                    Agora que voc√™ aprendeu a usar o comando `{ask}`, voc√™ pode deixar o c√≥digo do seu jogo de pedra, papel e tesoura mais interativo!

                    ### Exerc√≠cio
                    Deixe o jogo mais interativo adicionando um comando `{ask}` para fazer uma pergunta em seu jogo de pedra, papel e tesoura.
                example_code: |
                    ```
                    escolha {is} _
                    {print} Eu escolho escolha
                    ```
    secret:
        name: Superespi√£o
        default_save_name: Superespi√£o
        description: Fa√ßa seu pr√≥prio c√≥digo de espi√£o
        levels:
            12:
                story_text: |
                    In this adventure you can create your own super spy code. Encode a message that only the right agent can decipher.
                    If the enemy tries to crack the code, they will get some false info to waste their time.
                example_code: |
                    ```
                    name {is} {ask} 'What is your name?'
                    {if} name {is} '_'
                        a {is} 'Go to the airport '
                    {else}
                        a {is} 'Go to the trainstation '
                    password {is} {ask} 'What is the password?'
                    {if} password {is} _
                        b {is} 'tomorrow at 02.00'
                    {else}
                        b {is} 'today at 10.00'
                    {print} _ _ _
                    ```
            13:
                story_text: |
                    The code you made in the previous level can be made a lot easier in this one with the `{and}` command.
                example_code: |
                    ```
                    name = {ask} 'What is your name?'
                    password = {ask} 'What is your password?'
                    {if} name {is} 'Agent007' _ password {is} 'TOPSECRET'
                        {print} 'Go to the airport at 02.00'
                    {else}
                        {print} 'Go to the trainstation at 10.00'
                     ```
    sleep_command:
        name: '{sleep}'
        default_save_name: comando_durma
        description: introduzindo o comando {sleep}
        levels:
            2:
                story_text: |
                    ## The sleep command
                    Another new command in this level is `{sleep}`, which pauses your program for a second. If you type a number behind the {sleep} command, the program pauses for that amount of seconds.
                example_code: |
                    ```
                    {print} Minha cor favorita √©...
                    {sleep} 2
                    {print} verde!
                    ```
    songs:
        name: Cante uma can√ß√£o!
        default_save_name: Can√ß√£o
        description: Imprima uma can√ß√£o
        levels:
            6:
                story_text: |
                    As m√∫sicas geralmente cont√™m muita repeti√ß√£o. √Äs vezes, a repeti√ß√£o tamb√©m se baseia na contagem.
                    Por exemplo, como na conhecida can√ß√£o 'Garrafas de cerveja'. Voc√™ pode programar essa m√∫sica com um pouco de matem√°tica.
                example_code: |
                    ```
                    verso = 99
                    {print} verso 'garrafas de cerveja na parede'
                    {print} verso 'garrafas de cerveja'
                    {print} 'Pegue uma, passe por a√≠'
                    verso = verso - 1
                    {print} verso 'garrafas de cerveja na parede'
                    ```

                    Agora voc√™ pode repetir as linhas 2 a 9 quantas vezes quiser copiando as linhas.
                story_text_2: |
                    This children's song counts down from 5 little monkeys to 1 monkey.
                    If you copy line 2 - 7 and paste it under the the code, you can sing the whole song!
                example_code_2: |
                    ```
                    number = 6
                    number = number - 1
                    print number ' little monkeys jumping on the bed'
                    print 'One fell off and bumped his head'
                    print 'Mama called the doctor and the doctor said'
                    print 'NO MORE MONKEYS JUMPING ON THE BED!'
                    sleep
                    ```
            7:
                story_text: |
                    As m√∫sicas geralmente cont√™m muita repeti√ß√£o. Por exemplo... Beb√™ Tubar√£o! Se voc√™ canta, voc√™ continua cantando a mesma coisa:

                    Beb√™ tubar√£o tututudutudu <br>
                    Beb√™ tubar√£o tututudutudu <br>
                    Beb√™ tubar√£o tututudutudu <br>
                    Tubar√£o beb√™

                    Voc√™ pode fazer esta m√∫sica muito mais curta com um `{repeat}`! Voc√™ pode terminar o c√≥digo?
                example_code: |
                    ```
                    {repeat} _ _ {print} 'Baby Shark tututudutudu'
                    {print} 'Baby Shark'
                    ```
            8:
                story_text: |
                    Em um n√≠vel anterior voc√™ programou a m√∫sica 'Garrafas de cerveja'. Voc√™ fez um verso e depois teve que copiar os versos 99 vezes. No n√≠vel 7 voc√™ pode repetir a m√∫sica 99 vezes, apenas adicionando uma linha simples!
                example_code: |
                    ```
                    verso = 99
                    {repeat} 99 {times}
                         {print} verso 'garrafas de cerveja na parede'
                         {print} verso 'garrafas de cerveja'
                         {print} 'Pegue uma, passe por a√≠'
                         verso = verso - 1
                         {print} verso 'garrafas de cerveja na parede'
                    ```
            10:
                story_text: |
                    Neste n√≠vel, voc√™ pode facilmente fazer a m√∫sica infantil 'Cinco macaquinhos'. Voc√™ pode fazer o √∫ltimo refr√£o?
                    Voc√™ tamb√©m pode fazer toda a m√∫sica do tubar√£o beb√™ (incluindo todos os outros tubar√µes da fam√≠lia) em apenas 6 linhas!
                    Ou voc√™ pode fazer o Velho McDonald com todos os diferentes animais.
                example_code: |
                    ```
                    macacos = 5, 4, 3, 2
                    {for} macaco {in} macacos
                        {print} macaco 'macaquinhos pulando na cama'
                        {print} 'Um caiu e bateu a cabe√ßa'
                        {print} 'Mam√£e chamou o m√©dico e o m√©dico disse'
                        {print} 'SEM MAIS MACACOS PULANDO NA CAMA!'
                    ```

                    ```
                    tubar√µes = beb√™, mam√£e, papai, vov√≥, vov√¥
                    {for} tubar√£o {in} tubar√µes
                        {print} tubar√£o 'tututututudu'
                        {print} tubar√£o 'tututututudu'
                        {print} tubar√£o 'tututututudu'
                        {print} tubar√£o
                    ```
                    ```
                    animais = porco, cachorro, vaca
                    {for} animal {in} animais
                        {if} animal {is} porco
                            som = oink
                        {if} animal {is} cachorro
                            som = au
                        {if} animal {is} vaca
                            som = mu
                        {print} 'O velho McDonald tinha uma fazenda'
                        {print} 'I A I A O U!'
                        {print} 'e naquela fazenda ele tinha um ' animal
                        {print} 'I A I A O U!'
                        {print} 'com um ' som som ' aqui'
                        {print} 'e um ' som som ' ali'
                        {print} 'aqui um ' som
                        {print} 'l√° um' som
                        {print} 'em todos os lugares um ' som som
                    ```
                story_text_2: |
                    ### Exercise 2
                    Print the song Five little moneys jumping on the bed. Look up the text if you don't remember.

                    **(extra)** Print the song Old MacDonald had a farm, and make sure all animals make a different sound, using an `{if}`.
                example_code_2: |
                    ```
                    monkeys = 5, 4, 3, 2, 1
                    ```
            11:
                story_text: |
                    Neste n√≠vel voc√™ pode usar o comando `{for} i {in} {range}` para fazer m√∫sicas que usam contagem.
                example_code: |
                    ```
                    {for} i {in} {range} 5 {to} 1
                        {print} i ' macaquinhos pulando na cama'
                        {print} 'Um caiu e bateu a cabe√ßa'
                        {print} 'Mam√£e chamou o m√©dico e o m√©dico disse'
                        {if} i {is} 1
                            {print} 'COLOQUE AQUELES MACACOS LOGO NA CAMA!'
                        {else}
                            {print} 'CHEGA DE MACACOS PULANDO NA CAMA!'
                    ```
            12:
                story_text: |
                    Nesta m√∫sica podemos tornar ainda mais f√°cil programar '{if} voc√™ est√° feliz e sabe disso, bata palmas'. Uma vez que podemos colocar todas as a√ß√µes em uma vari√°vel, confira:
                example_code: |
                    ```
                    a√ß√µes = 'bater palmas', 'bater os p√©s', 'gritar Hurra!'
                    {for} a√ß√£o {in} a√ß√µes
                        {for} i {in} {range} 1 {to} 2
                            {print} 'se voc√™ est√° feliz e sabe disso'
                            {print} a√ß√£o
                        {print} 'se voc√™ est√° feliz e sabe disso e realmente quer demonstrar'
                        {print} 'se voc√™ est√° feliz e sabe disso'
                        {print} a√ß√£o
                    ```
            13:
                story_text: |
                    In the previous adventure you have learned how to use an argument in a function, but did you know that you could combine them with {ask} commands as well?
                    In this example we have changed the 'My Bonnie' program and made it interactive. You are now asked where Bonnie is.
                example_code: |
                    ```
                    {define} song {with} place
                        {print} 'My Bonnie is ' place

                    chosen_place = {ask} 'Where do you want Bonnie to be?'
                    synonym = {ask} 'What is another word for that?'

                    {call} song {with} chosen_place
                    {call} song {with} synonym
                    {call} song {with} chosen_place
                    ```
            16:
                story_text: |
                    Neste n√≠vel, voc√™ pode programar uma m√∫sica como Velho MacDonald ainda mais rapidamente. Voc√™ pode conectar o animal certo ao som certo simplesmente colocando-os no mesmo lugar na lista.
                    O Marinheiro B√™bado tamb√©m √© feito rapidamente neste n√≠vel. Voc√™ s√≥ precisa de 8 linhas para a m√∫sica inteira, confira!
                example_code: |
                    ```
                    animais = ['porco', 'cachorro', 'vaca']
                    sons = ['oinc', 'au', 'mu']
                    {for} i {in} {range} 1 {to} 3
                         animal = _
                         som = _
                         {print} 'O velho McDonald tinha uma fazenda'
                         {print} 'I A I A O!'
                         {print} 'e naquela fazenda ele tinha um ' animal
                         {print} 'I A I A O!'
                         {print} 'com um ' som som ' aqui'
                         {print} 'e um ' som som ' ali'
                         {print} 'aqui um ' som
                         {print} 'l√° um' som
                         {print} 'em todos os lugares um ' som som
                    ```

                    ```
                    linhas = ['o que devemos fazer com o marinheiro b√™bado', 'raspar sua barriga com uma navalha enferrujada', 'coloc√°-lo em um longo barco at√© que ele fique s√≥brio']
                    {for} linha {in} linhas
                        {for} i {in} {range} 1 {to} 3
                            {print} linha
                        {print} 'no in√≠cio da manh√£'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'e assim se levanta a √¢ncora'
                        {print} 'no in√≠cio da manh√£'
                    ```
            18:
                story_text: |
                    In level 16 we made songs using lists. These programs however are no longer working properly in this level. The colons from level 17 and the brackets from level 18 still need to be added.

                    ### Exercise 1
                    The Drunken sailor song is given as sample code, but not yet working.
                    Can you make sure everything works again? To help you, we've put _ in the places of _some_ errors.

                    ### Exercise 2
                    Now also look up your Old MacDonald song from level 16, and correct it.
                example_code: |
                    ```
                    lines = ['what shall we do with the drunken sailor', 'shave his belly with a rusty razor', 'put him in a long boat till hes sober']
                    {for} line {in} lines _
                        {for} i {in} {range} 1 {to} 3 _
                            {print} _ line _
                        {print} 'early in the morning'
                        {for} i {in} {range} 1 {to} 3
                            {print} 'way hay and up she rises'
                        {print} 'early in the morning'
                    ```
    songs_2:
        name: Sing a song! 2
        default_save_name: Can√ß√£o 2
        description: Cante uma can√ß√£o 2
        levels:
            12:
                story_text: |
                    Songs contain a lot of repetition. We can capture it with a function!
                    ### Exercise
                    Look at the example code with the function. Fill out the two lines so the full song is printed.
                example_code: |
                    ```
                    {define} twinkle
                        {print} 'Twinkle'
                        {print} '...'

                    {call} twinkle
                    {print} 'Up above the world so high'
                    {print} 'Like a diamond in the sky'
                    {call} _
                    ```
    tic:
        name: Jogo da velha
        default_save_name: Tic
        description: Jogue um Jogo da Velha!
        levels:
            13:
                story_text: |
                    In this adventure you can program a game of Tic Tac Toe. You can play with two people. Taking turns, you pick a number of the spot (1 - 9) you want to put your sign (x or o) on.
                    The first player that gets 3 in a row (horizontally, vertically or diagonally) wins!
                    Have fun!
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game {is} 'on'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice {is} 1
                                    spot_1 = sign
                                {if} choice {is} 2
                                    spot_2 = sign
                                {if} choice {is} 3
                                    spot_3 = sign
                                {if} choice {is} 4
                                    spot_4 = sign
                                {if} choice {is} 5
                                    spot_5 = sign
                                {if} choice {is} 6
                                    spot_6 = sign
                                {if} choice {is} 7
                                    spot_7 = sign
                                {if} choice {is} 8
                                    spot_8 = sign
                                {if} choice {is} 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner {is} 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign {is} 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
            14:
                story_text: |
                    In the previous levels you've made a tic tac toe game. Now you've learned how to use the `=` sign, the `==` sign and the `!=` sign.
                    You can use this knowledge in your new Taic Tac Toe game, like this:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {for} i {in} {range} 1 {to} 9
                        {if} game != 'over'
                            choice = {ask} 'Player ' sign ', which spot?'
                            {if} choice {in} open_spots
                                {remove} choice {from} open_spots
                                {if} choice == 1
                                    spot_1 = sign
                                {if} choice == 2
                                    spot_2 = sign
                                {if} choice == 3
                                    spot_3 = sign
                                {if} choice == 4
                                    spot_4 = sign
                                {if} choice == 5
                                    spot_5 = sign
                                {if} choice == 6
                                    spot_6 = sign
                                {if} choice == 7
                                    spot_7 = sign
                                {if} choice == 8
                                    spot_8 = sign
                                {if} choice == 9
                                    spot_9 = sign
                            {else}
                                {print} 'That spot was already taken'
                            {print} spot_1 spot_2 spot_3
                            {print} spot_4 spot_5 spot_6
                            {print} spot_7 spot_8 spot_9
                            {print} ' '
                            winner = {ask} 'Did you win?'
                            {if} winner == 'yes'
                                {print} 'Good job, player ' sign '!'
                                game = 'over'
                            {else}
                                {if} sign == 'x'
                                    sign = 'o'
                                {else}
                                    sign = 'x'
                    ```
            15:
                story_text: |
                    In this level you can improve your Tic Tac Toe game with the {while} loop/ With this loop you can combine the `{if} game != 'over'` and the `{for} i {in} {range} 1 to 9` into one simple line.
                    Check it out:
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = 1, 2, 3, 4, 5, 6, 7, 8, 9
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over'
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots
                            {remove} choice {from} open_spots
                            {if} choice == 1
                                spot_1 = sign
                            {if} choice == 2
                                spot_2 = sign
                            {if} choice == 3
                                spot_3 = sign
                            {if} choice == 4
                                spot_4 = sign
                            {if} choice == 5
                                spot_5 = sign
                            {if} choice == 6
                                spot_6 = sign
                            {if} choice == 7
                                spot_7 = sign
                            {if} choice == 8
                                spot_8 = sign
                            {if} choice == 9
                                spot_9 = sign
                        {else}
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        winner = {ask} 'Did you win?'
                        {if} winner == 'yes'
                            {print} 'Good job, player ' sign '!'
                            game = 'over'
                        {else}
                            {if} sign == 'x'
                                sign = 'o'
                            {else}
                                sign = 'x'
                    ```
            17:
                story_text: |
                    In the previous levels the tic tac toe game had an annoying feature. After every move, you had to fill in yourself if you had won or not.
                    This made the game playable, but also quite slow. In this level we have learned the `{elif}` command, that could solve that problem.
                    To use the {elif} to let Hedy check whether or not a player has won is fun, but it also requires a fair amount of extra lines.

                    In the example code you see that we added the requirements to win (3 spots in a row horizontally, vertically or diagonally).
                    You can find them in line 46 to 69. You can see that each time the requirement is met (so if a player has won) the variable game is set to 'over'.
                    This means that the {while} loop will be stopped and the game ends.
                example_code: |
                    ```
                    sign = 'x'
                    open_spots = [1, 2, 3, 4, 5, 6, 7, 8, 9]
                    game = 'on'
                    spot_1 = '.'
                    spot_2 = '.'
                    spot_3 = '.'
                    spot_4 = '.'
                    spot_5 = '.'
                    spot_6 = '.'
                    spot_7 = '.'
                    spot_8 = '.'
                    spot_9 = '.'
                    {print} 'TIC TAC TOE!'
                    {print} spot_1 spot_2 spot_3
                    {print} spot_4 spot_5 spot_6
                    {print} spot_7 spot_8 spot_9
                    {print} ' '
                    {while} game != 'over':
                        choice = {ask} 'Player ' sign ', which spot?'
                        {if} choice {in} open_spots:
                            {remove} choice {from} open_spots
                            {if} choice == 1:
                                spot_1 = sign
                            {if} choice == 2:
                                spot_2 = sign
                            {if} choice == 3:
                                spot_3 = sign
                            {if} choice == 4:
                                spot_4 = sign
                            {if} choice == 5:
                                spot_5 = sign
                            {if} choice == 6:
                                spot_6 = sign
                            {if} choice == 7:
                                spot_7 = sign
                            {if} choice == 8:
                                spot_8 = sign
                            {if} choice == 9:
                                spot_9 = sign
                        {else}:
                            {print} 'That spot was already taken'
                        {print} spot_1 spot_2 spot_3
                        {print} spot_4 spot_5 spot_6
                        {print} spot_7 spot_8 spot_9
                        {print} ' '
                        {if} spot_1 == spot_2 {and} spot_2 == spot_3 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_4 == spot_5 {and} spot_5 == spot_6 {and} spot_4 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_7 == spot_8 {and} spot_8 == spot_9 {and} spot_7 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_4 {and} spot_4 == spot_7 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_2 == spot_5 {and} spot_5 == spot_8 {and} spot_2 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_6 {and} spot_6 == spot_9 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_1 == spot_5 {and} spot_5 == spot_9 {and} spot_1 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {elif} spot_3 == spot_5 {and} spot_5 == spot_7 {and} spot_3 != '.':
                            {print} 'Player ' sign ' wins!'
                            game = 'over'
                        {else}:
                            {if} sign == 'x':
                                sign = 'o'
                            {else}:
                                sign = 'x'
                    ```
    turtle:
        name: Tartaruga
        default_save_name: Tartaruga
        description: Fa√ßa o seu pr√≥prio desenho
        levels:
            1:
                story_text: |
                    Voc√™ tamb√©m pode usar Hedy para desenhar. Ao combinar giros e linhas, voc√™ pode fazer um quadrado ou uma escada!

                    Usando `{forward}` voc√™ desenha uma linha para frente. O n√∫mero depois dele determina o qu√£o longe a tartaruga vai andar. `{turn} {right}` gira um quarto de volta no sentido hor√°rio, `{turn} {left}` gira no sentido anti-hor√°rio.
                    Se voc√™ quiser voltar, voc√™ usa o comando `{forward}` mas com um n√∫mero negativo. Por exemplo, `{forward} -100`
                example_code: |
                    ```
                    {forward} 100
                    {turn} {left}
                    ```
                story_text_2: |
                    ### Exercise
                    Este √© o in√≠cio de uma pequena escada. Voc√™ pode faz√™-la ter 5 passos?
                example_code_2: |
                    ```
                    {forward} 20
                    {turn} {right}
                    {forward} 20
                    {turn} {left}
                    {forward} 20
                    ```
            2:
                story_text: |
                    Neste n√≠vel voc√™ pode usar vari√°veis para tornar a tartaruga interativa. Por exemplo, voc√™ pode perguntar ao jogador quantos passos a tartaruga deve dar.
                example_code: |
                    ```
                    resposta {is} {ask} Quantos passos a tartaruga deve dar?
                    {forward} resposta
                    ```
                story_text_2: |
                    Al√©m disso, no n√≠vel 1 a tartaruga s√≥ podia virar para a esquerda ou para a direita. Isso √© um pouco chato!
                    No n√≠vel 2, ela pode apontar o nariz em todas as dire√ß√µes.

                    Use 90 para virar um quarto. Chamamos isso de graus. Uma volta completa √© de 360 graus.
                    Voc√™ pode fazer uma figura com este c√≥digo? Talvez um tri√¢ngulo ou um c√≠rculo?
                example_code_2: |
                    ```
                    {print} Desenhando figuras
                    √¢ngulo {is} 90
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    ```
            3:
                story_text: |
                    Neste n√≠vel voc√™ pode usar `{at} {random}` com a tartaruga de desenho. Uma escolha aleat√≥ria faz com que a tartaruga percorra um caminho diferente a cada vez.
                    Use `{at} {random}` para escolher um valor de uma lista. Voc√™ pode copiar e colar as linhas 2 e 3 para criar um caminho aleat√≥rio mais longo.
                example_code: |
                    ```
                    √¢ngulos {is} 10, 50, 90, 150, 250
                    {turn} √¢ngulos {at} {random}
                    {forward} 25
                    ```
            4:
                story_text: |
                    No n√≠vel 4 voc√™ tem que usar aspas com `{print}` e `{ask}`. Tamb√©m ao desenhar!
                example_code: |
                    ```
                    {print} 'Desenhando figuras'
                    √¢ngulo {is} 90
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    ```
                story_text_2: |
                    You can also change the color of the lines with the command `{color}`. Check out the example.
                    You can also use the command `{color} {white}` to make 'invisible' lines. You could use these white lines to move the turtle anywhere in the screen before you start drawing.
                example_code_2: |
                    ```
                    {color} {white}
                    {forward} -80
                    {color} {green}
                    {forward} 50
                    {color} {yellow}
                    {forward} 50
                    {color} {red}
                    {forward} 50
                    ```
            5:
                story_text: |
                    No n√≠vel 5 voc√™ pode fazer uma escolha com `{if}`. Por exemplo, entre diferentes tipos de figuras.
                example_code: |
                    ```
                    {print} 'Desenhando Figuras'
                    figura {is} {ask} 'Voc√™ quer um quadrado ou um tri√¢ngulo?'
                    {if} figura {is} tri√¢ngulo √¢ngulo {is} 120
                    {else} √¢ngulo {is} 90
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    {turn} √¢ngulo
                    {forward} 25
                    ```
                story_text_2: |
                    ### Exercise
                    Fill in the correct numbers in this code to get it to work.
                    After you've done that, you can try to add the option backwards.

                    **Extra** Instead of using 'left' and 'right', remake the program with North, East, South and West.
                    This way you could add even more directions like Northeast and Southwest etc.
                example_code_2: |
                    ```
                    direction {is} {ask} 'Do you want to go left, right, or straight ahead?'
                    if direction is left turn _
                    if direction is right turn _
                    forward 100
                    ```
            6:
                story_text: |
                    Neste n√≠vel voc√™ pode usar c√°lculos para desenhar figuras diferentes.
                    Voc√™ pode ter aprendido na escola que girar um c√≠rculo completo √© de 360 graus. Se n√£o, agora voc√™ sabe!
                    √â por isso que voc√™ tamb√©m usa 90 graus para um quadrado. 360 dividido por 4 √© 90.
                    Agora que podemos fazer contas com a Hedy, podemos desenhar todas as figuras que quisermos!
                example_code: |
                    ```
                    √¢ngulos = {ask} 'Quantos √¢ngulos voc√™ deseja?'
                    √¢ngulo = 360 / √¢ngulos
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    {forward} 50
                    {turn} √¢ngulo
                    ```
            8:
                story_text: |
                    Agora que podemos repetir v√°rias linhas, podemos fazer figuras com mais facilidade.
                    N√≥s s√≥ temos que definir o √¢ngulo uma vez e ent√£o usar essa vari√°vel no `{repeat}`.
                example_code: |
                    ```
                    √¢ngulo = 90
                    {repeat} 10 {times}
                        {turn} √¢ngulo
                        {forward} 50
                    ```
                story_text_2: |
                    Al√©m disso, agora podemos melhorar o programa que desenha diferentes figuras.
                    Voc√™ consegue descobrir at√© onde a tartaruga tem que virar aqui? Termine o c√≥digo e voc√™ pode desenhar qualquer pol√≠gono que quiser!
                example_code_2: |
                    ```
                    √¢ngulos = {ask} 'Quantos √¢ngulos eu deve desenhar?'
                    √¢ngulo= 360 / √¢ngulos
                    {repeat} √¢ngulos {times}
                        {turn} _
                        {forward} _
                    ```
            9:
                story_text: |
                    Now that we can use a `{repeat}` inside a `{repeat}`, we can create more complex figures.

                    ### Exercise 1
                    This code creates three black triangles, change that into five pink squares.

                     **(extra)** Create a figure of your own choosing consisting of at least two different shapes types.
                example_code: |
                    ```
                    {color} {black}
                    {repeat} 3 {times}
                        {repeat} 3 {times}
                            {forward} 10
                            {turn} 120
                        {color} {white}
                        {forward} 50
                        {color} {black}
                    ```
            10:
                story_text: |
                    In this level you can make the turtle draw a figure.
                    The turtle will travel the distances in the list, one by one, making bigger and bigger steps.

                    ### Exercise 1
                    Add a 90 degree turn in the loop, so that a spiral is drawn.
                    Add at least 5 numbers to the list, so the spiral grows larger.
                     **(extra)** can you change the spiral into another shape? Experiment with numbers for the turn!

                    ### Exercise 2
                    The spiral is drawn outwards, make it go inwards?
                example_code: |
                    ```
                    {turn} 90
                    distances = 10, 20, 30, 40, 50, 60
                    {for} distance {in} distances
                        {forward} distance
                    ```
                    ```
            12:
                story_text: |
                    We can use functions to draw more complex figures with less code.
                    ### Exercise 1
                    Fill the function so that three squares are created. If you want the image to look nicer, you can make the lines between the squares white.

                    ### Exercise 2
                    The code can be made even shorter. Place the final lines into a `{repeat}` so the figure remains the same.

                    ### Exercise 3
                    Create your own drawing with different figures.
                    Change both the number of figures with the `{repeat}` and the shape of the figures in the `{define}`
                example_code: |
                    ```
                    {define} square
                        {repeat} 4 {times}
                            {turn} _
                            {forward} _
                    {call} square
                    {forward} 50
                    {call} square
                    {forward} 50
                    {call} square
                    ```
    turtle_draw_it:
        name: Draw it!
        default_save_name: Draw it
        description: Draw this picture with the turtle
        levels:
            1:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                        Rectangle <img src="https://github.com/hedyorg/hedy/assets/80678586/77aa99d5-cd8f-4969-b49d-e8fed34ac550" width="100">
                        Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                        Stairs<img src="https://github.com/hedyorg/hedy/assets/80678586/d4301e62-ec66-4031-827c-7d21f73ba106" width="200">
                    </div>
            2:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/e974b62c-f0cf-445a-8bd4-5ad9f1f71204" width="100">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/803d8f42-9708-448c-82ea-d035697f08c9" width="150">
                    Boat <img src="https://github.com/hedyorg/hedy/assets/80678586/94ef7189-442a-4c8f-827d-12a69203c2e9" width="150">
                    </div>
            3:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/71e04d98-9545-4614-9caf-a5f179b756a1" width="150">
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/421c4d28-cb99-424b-be26-dcae30d65c80" width="150">
                    Arrow <img src="https://github.com/hedyorg/hedy/assets/80678586/3cbebcae-5258-47c5-a6ac-e7ee36c1d1ce" width="200">
                    </div>
            4:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Colored Star <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Rainbow <img src="https://github.com/hedyorg/hedy/assets/80678586/2728b10f-9f7f-45ea-964e-5b284033e4f0" width="500">
                    Nested squares <img src="https://github.com/hedyorg/hedy/assets/80678586/f013f9fa-bc68-4c60-b778-2c457799d6f7" width="200">
                    </div>
                example_code: |
                    **Extra** Up for a real challenge? Make sure that the colors of these figures are selected randomly, so that each time you run your programs they'll look differently!

                    ```
                    colors {is} red, orange, yellow, green, blue, purple, pink, brown, gray, black
                    color _
                    ```
            5:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Make only one code that lets the player decide which letter they'd like to see! And can you add even more letters?

                    <div class="w-full flex flex-row gap-2">
                    F <img src="https://github.com/hedyorg/hedy/assets/80678586/8a021b76-c24b-4e7c-b960-48d57f3bcb20" width="100">
                    E <img src="https://github.com/hedyorg/hedy/assets/80678586/12821803-6422-416a-8e36-9902d14e57a4" width="100">
                    L <img src="https://github.com/hedyorg/hedy/assets/80678586/3af6f919-7b67-4ee7-b923-11e56f2b6b24" width="100">
                    </div>
                example_code: |
                    Hint:
                    ```
                    chosen_letter {is} {ask} 'Which letter would you like to see? F, E or L?
                    {if} _
                    ```
            6:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** Let the player decide which color the square should be.

                    ***Extra*** Can you make the letter of your own first name and the flag of your own country too?

                    <div class="w-full flex flex-row gap-2">
                    Square <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="150">
                    Letters <img src="https://github.com/hedyorg/hedy/assets/80678586/e75f4fa5-f1f5-4b48-806c-916c28e4e8ad" width="100">
                    Flag <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the square:
                    ```
                    chosen_color = {ask} _
                    ```
            7:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/92e492e1-1593-489b-aaf0-51d2a29755f4" width="200">
                    Triangle <img src="https://github.com/hedyorg/hedy/assets/80678586/3629a5e6-1f02-4851-aab9-c5430ba4a1f1" width="200">
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/1ba2ff71-1230-4fe3-8255-b2c504cf1b4e" width="200">
                    </div>
            8:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    <div class="w-full flex flex-row gap-2">
                    Square (3) <img src="https://github.com/hedyorg/hedy/assets/80678586/03b96c2c-7b94-4032-9f9f-3f3b13573623" width="200">
                    Randomly colored star (5) <img src="https://github.com/hedyorg/hedy/assets/80678586/dbe39006-c050-4833-b5c4-f9d1fb1c0781" width="150">
                    Randomly colored spiral (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/9bcdb3f1-367d-4ae0-878f-d09005424a35" width="150">
                    </div>
            9:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    **Extra** The number in brackets indicates in how many lines of code this figure can be drawn. Can you do it in the same amount of lines?

                    **Extra** Give the player a choice which country they would like to see the flag of.

                    <div class="w-full flex flex-row gap-2">
                    Cross (7) <img src="https://github.com/hedyorg/hedy/assets/80678586/76e42c76-aa3f-4863-8eee-ead73c09a186" width="150">
                    Randomly colored nested squares (8) <img src="https://github.com/hedyorg/hedy/assets/80678586/17f878cc-e893-4c10-b32e-a09a50bf08de" width="200">
                    Flags <img src="https://github.com/hedyorg/hedy/assets/80678586/877fc337-df80-4185-8005-a6c28904f66e" width="300">
                    </div>
                example_code: |
                    Hint for the nested squares:
                    ```
                    colors = red, blue, orange, yellow, pink, purple, green, brown, black
                    distance = 120
                    repeat 5 times
                    _
                    ```
                    Hint for the flags:
                    ```
                    country = ask 'which country would you like to see the flag of?'
                    if country is 'the Netherlands'
                        color_1 = red
                        color_2 = white
                        color_3 = blue
                    ```
            10:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Nested Hexagon <img src="https://github.com/hedyorg/hedy/assets/80678586/3629e908-3cd5-44ac-bbcd-1f1cceb15654" width="150">
                    Traffic lights  <img src="https://github.com/hedyorg/hedy/assets/80678586/edbbb608-5ff8-4349-85a6-e47809adde43" width="100">
                    </div>
                example_code: |
                    Hint Nested Hexagon:
                    ```
                    distances = 100, 80, 60, 40, 20
                    {for} distance {in} distances
                    _
                    ```

                    Hint Traffic Lights:
                    ```
                    colors = red, yellow, green
                    {for} chosen_color {in} colors
                        color _
                        {repeat} _
                    ```
                story_text_2: |
                    Christmas lights <img src="https://github.com/hedyorg/hedy/assets/80678586/9637ea6d-6edc-4d88-a6f7-10271bfc5371" width="500">
                example_code_2: |
                    Hint Christmas Lights:

                    Start by moving to the left side of the screen with an invisible white line. Then hang up the Christmas lights!
                    ```
                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 90

                    colors = red, blue, yellow, purple, green, orange, pink
                    {for} chosen_color {in} colors
                    _
                    ```
            11:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    <div class="w-full flex flex-row gap-2">
                    Beehive (6) <img src="https://github.com/hedyorg/hedy/assets/80678586/ec02469c-907b-4695-9382-d39a8f3c00ec" width="200">
                    Fan (5)  <img src="https://github.com/hedyorg/hedy/assets/80678586/a032ab35-c70c-4e67-9b4e-036a03ecce87" width="200">
                    </div>
                example_code: |
                    Hint Beehive:
                    ```
                    {for} amount_of_combs {in} {range} 1 {to} _
                        {for} walls_of_one_comb {in} {range} 1 {to} _
                            {forward} _
                            {turn} _
                        {forward} _
                        {turn} _
                    ```

                    Hint Fan:
                    Start out like the fan you made in level 7. Or take a peak at the hint for the beehive, because the codes are very similar.
            12:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!
                example_code: |
                    Hint: Bracelet designing program


                    Firstly, define a function **for each shape** you want to use on the bacelet. Then, add the shapes to the bacelet like this:

                    ```
                    {define} draw_a_square
                    _

                    {color} white
                    {turn} -90
                    {forward} 300
                    {turn} 180

                    {for} i {in} {range} 1 {to} 5
                        {color} gray
                        {forward} 100
                        shape = {ask} 'What kind of shape would you like next on the bracelet?'
                        chosen_color = {ask} 'In which color?'
                        {color} chosen_color
                        {if} shape = 'square'
                            {call} draw_a_square
                    ```
            13:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Street in different sizes <img src="https://github.com/hedyorg/hedy/assets/80678586/cdae9d97-d5ef-46f3-8838-24fa7b5b1bec" width="300">
                    Colored street  <img src="https://github.com/hedyorg/hedy/assets/80678586/9893e0bd-c0f8-49bc-a5a7-217182407724" width="300">
                example_code: |
                    Hint Street in different sizes
                    ```
                    {define} draw_a_house {with} size
                    _

                    {call} draw_a_house {with} 90
                    {call} draw_a_house {with} 60
                    {call} draw_a_house {with} 30
                    ```

                    Hint Colored street
                    ```
                    {define} draw_a_house {with} chosen_color
                    _
                    ```
            14:
                story_text: |
                    ### Exercise
                    Create a program that asks the player how many corners their figure should have and then creates that figure.
                    The figure in the image is the output when the player fills in 10.

                    <div class="w-full flex flex-row gap-2">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/ee32f40e-dea1-4e7c-a813-3ef63671254b" width="300">
                     <img src="https://github.com/hedyorg/hedy/assets/80678586/3621bf77-527d-41e8-a44f-c5a21bb4ffd2" width="200">
                    </div>
                example_code: |
                    ```
                    {define} calculate_degrees {with} amount_of_corners
                        _ 360 / amount_of_corners


                    {define} draw_figure {with} degrees
                        _
                            {forward} 400/amount_of_corners
                            {turn} _

                    amount_of_corners = {ask} _
                    degrees = {call} _ {with} _

                    {call} _ {with}
                    {call} _ {with}
                    ```
            15:
                story_text: |
                    ### Exercise
                    Recreate the drawings with the turtle!

                    Spiral <img src="https://github.com/hedyorg/hedy/assets/80678586/6943223c-018b-435b-a391-23723cc7a6ad" width="150">
                example_code: |
                    Spiral
                    ```
                    distance = 5
                    {while} distance < 200
                        distance = distance + 5
                         _
                    ```
                story_text_2: |
                    Fan <img src="https://github.com/hedyorg/hedy/assets/80678586/cb671065-b47b-49f0-b298-dcbcd2a5e28f" width="150">
                example_code_2: |
                    Fan
                    ```
                    {define} draw_a_square {with} side
                    _

                    i = 100
                    {while} i > 1
                        _ {with} i
                        _
                        i = i - 3
                    ```
                story_text_3: |
                    Star <img src="https://github.com/hedyorg/hedy/assets/80678586/17564e0a-63e1-4794-8d41-15ac8c1a5a93" width="150">
                example_code_3: |
                    Star
                    A star is usually drawn using 144-degree-turns. If you change this slightly to 143 degrees for example and repeat the pattern multiple times with a {while} loop you can make this figure.
    while_command:
        name: '{while}'
        default_save_name: while_command
        description: '{while}'
        levels:
            15:
                story_text: |-
                    We are going to learn a new loop, the `{while}` loop! We continue the loop as long as the statement is true.
                    So don't forget to change the value in the loop.

                    In the example code, we continue until a correct answer has been given.
                    If the correct answer is never given, the loop never ends!
                example_code: |
                    ```
                    answer = 0
                    {while} answer != 25
                        answer = {ask} 'What is 5 times 5?'
                    {print} 'A correct answer has been given'
                    ```
    years:
        name: New Year's
        default_save_name: New Year's Countdown
        description: Contagem regressiva para o Ano Novo!
        levels:
            11:
                story_text: |
                    In this level you can use the `{for} i {in} {range}` command to countdown to the New Year.

                    ### Exercise
                    Fill in the blanks and make the code work!
                example_code: |
                    ```
                    for _ in _ 10 to 1
                        {print} i
                    {print} 'Happy New Year!'
                    ```
